{"version":3,"sources":["offloaders/workers/evaluationWorker/evaluationWorker.ts","offloaders/workers/trainingWorker/trainingWorker.ts","game/evaluate.ts","numberValidation.ts","random.ts","agents/artichoke.ts","splitRandomVariable.ts","agents/broccoli.ts","agents/carrot.ts","agents/daikon.ts","agents/eggplant.ts","agents/fig.ts","agents/grape.ts","agents/habanero.ts","agents/ilama.ts","agents/index.ts","arraySet.ts","getAgent.ts","offloaders/workers/evaluationWorker/types.ts","offloaders/workers/evaluationWorker/evaluationWorker.importable.js","offloaders/evaluate.ts","offloaders/workers/trainingWorker/types.ts","types/state.ts","offloaders/workers/trainingWorker/trainingWorker.importable.js","offloaders/train.ts","paintGraph.ts","stateSavers/utils.ts","stateSavers/byteStringifier.ts","stateSavers/appOptionsSaver.ts","App.tsx","stateSavers/agentsSaver.ts","serviceWorker.ts","index.tsx","debugUtils/makeUtilsAccessibleForDebug.ts"],"names":["module","exports","Worker","evaluate","a","b","options","aTotal","bTotal","hands","ante","i","Math","random","aReward","getLeaderReward","bReward","leader","follower","leaderStrength","leaderNoise","leaderOutput","lead","initialBet","max","maxBet","followerStrength","followerNoise","followingBet","follow","isPositiveInteger","n","floor","Number","isFinite","isPositiveFiniteNumber","isOnInclusiveUnitInterval","normalRandom","mean","variance","u1","u2","z1","sqrt","log","cos","PI","AgentArtichoke","leaderNetwork","followerNetwork","agentType","inputs","this","AgentType","Artichoke","Float64Array","strength","noise","opponent","train","leaderFloats","toArrayBuffer","followerFloats","out","length","set","buffer","fromHiddenLayerSize","hiddenLayerSize","hiddenSize","Network","fromLayerSizes","floats","leaderSize","followerSize","fromArrayBuffer","slice","inputSize","outputSize","hiddenWeights","hiddenBiases","hiddenActivations","outputWeights","outputBiases","outputActivations","updatedHiddenWeights","updatedHiddenBiases","updatedOutputWeights","updatedOutputBiases","hiddenWeightsSize","hiddenBiasesSize","hiddenActivationsSize","outputWeightsSize","outputBiasesSize","outputActivationsSize","ArrayBuffer","BYTES_PER_ELEMENT","initializeWeights","subarray","network","input","hiddenIndex","dot","inputIndex","outputIndex","sigmoid","containingAgent","evaluationOptions","baseline","derivativeStep","learningRate","numberOfHiddenWeights","originalWeight","derivative","numberOfHiddenBiases","originalBias","numberOfOutputWeights","numberOfOutputBiases","weights","exp","splitRandomVariable","u32","Uint32Array","u16","Uint16Array","Error","isBigEndian","splitterIn","_2_POW_32","splitterOut","_2_POW_16","AgentBroccoli","leadOutput","Broccoli","_buffer","_strength","_initialBet","AgentCarrot","Carrot","AgentDaikon","bet","Daikon","AgentEggplant","Eggplant","AgentFig","Fig","trainWithoutUpdating","update","AgentGrape","Grape","AgentHabanero","Habanero","AgentIlama","minStrength","Ilama","isStrengthSufficient","ALL_AGENT_TYPES","deserializeAgent","includes","deserializeAgentOfType","TypeError","createAgent","creationOptions","fromCreationOptions","getAgentTypeDisplayString","getDefaultAgentCreationOptions","areAgentCreationOptionsValid","areArtichokeCreationOptionsValid","areDaikonOptionsValid","areHabaneroCreationOptionsValid","areIlamaOptionsValid","add","arr","item","concat","remove","removedItem","filter","isEqual","every","aElem","bElem","getAgent","agents","expectedName","name","agent","JSON","stringify","EvaluationWorkerMessageType","EvaluationWorker","promisifiedEvaluate","useMainThread","Promise","resolve","evaluateOnMainThread","aBuffer","bBuffer","worker","addEventListener","event","notification","data","evaluation","postMessage","messageType","Start","agentABuffer","agentBBuffer","evaluateOnWorker","TrainingWorkerMessageType","StateType","TrainingWorker","trainAsync","traineeSource","opponents","trainingCycles","onCycleComplete","trainee","namedTrainee","namedOpponents","map","opponentNames","opponentCount","cycleNumber","relativeRewards","opponentIndex","strongestOpponentIndex","lowestRelativeReward","reward","strongestOpponent","Array","opponentName","noOp","trainOnMainThread","trainingCycleOptions","terminateWorker","terminate","bind","CycleComplete","namedTraineeBuffer","agentName","Done","namedOpponentBuffers","trainOnWorker","BetStateType","GameAcknowledgeableType","PolicyGraphType","paintGraph","canvas","state","width","height","ctx","getContext","graphedAgentName","graph","policyGraphType","Leader","clearRect","points","x0Arr","x0InitialBet","x0UnadjustedMaxBet","x0MaxBet","unadjustedMaxBet","push","x1Arr","x1InitialBet","x1UnadjustedMaxBet","x1MaxBet","getLeaderPolicyPoints","lineWidth","initialUnadjustedMaxBet0Y","beginPath","moveTo","point","x","y","lineTo","strokeStyle","stroke","initialBet0Y","maxBet0Y","paintLeaderGraph","Follower","getFollowerPolicyPoints","CANVAS_SIZE","fillStyle","getDarkness","fillRect","paintFollowerGraph","byte","LocalStorageKeys","decodeBytes","str","numberOfBytes","toU32","charCodeAt","bytes","Uint8Array","code","encodeBytes","u16s","ceil","String","fromCharCode","stringifyU16s","saveAppOptions","stateStr","localStorage","setItem","AppOptions","App","props","graphCanvasRef","window","app","React","createRef","agentNamesStr","getItem","AgentNames","parse","agentStr","AgentPrefix","agentsSaver","version","getSavedAppOptions","useMainThreadForExpensiveComputation","stateType","AgentList","getInitialState","bindMethods","onOptionsClick","onCreateAgentClick","onDeleteAgentClick","onEvaluateClick","onTrainClick","onPlayClick","onGraphClick","onAgentListClick","onTrainingCyclesInputValueChange","onTrainingCycleDerivativeStepInputValueChange","onTrainingCycleLearningRateInputValueChange","onTrainingCycleEvaluationHandsInputValueChange","onTrainingCycleEvaluationAnteInputValueChange","onUseMainThreadChange","onAgentNameChange","onAgentTypeChange","onConfirmCreationClick","onFirstEvaluatedAgentNameChange","onSecondEvaluatedAgentNameChange","onStartEvaluationClick","onTraineeChange","onStartTrainingClick","onTerminateTrainingClick","onCancelAgentDeletionClick","onConfirmAgentDeletionClick","onNameOfAgentToBeDeletedChange","onSelectAgentForDeletionClick","onOpponentNameChange","onBetInputValueChange","onPlaceBetClick","onFoldClick","onAcknowledgeClick","onGraphedAgentNameChange","onGraphTypeChange","onGraphNoiseChange","current","Graph","expectedType","renderAgentList","Options","renderOptionsMenu","AgentCreation","renderAgentCreationMenu","AgentDeletion","renderAgentDeletionMenu","Evaluation","renderEvaluationMenu","TrainingAgentSelection","renderTrainingAgentSelectionMenu","Training","renderTrainingMenu","Play","renderPlayMenu","renderGraphMenu","getSortedAgents","className","key","onClick","disabled","inputValues","type","value","onChange","checked","isAgentNameValid","test","renderAgentParams","withPropertyValuesParsedAsNumbers","agentCreationOptionInputValues","changeAgentCreationOptionInputValue","target","isConfirmingDeletion","selectedAgentName","hasStartedEvaluation","firstAgentReward","undefined","renderEvaluationInProgressMenu","renderEvaluationCompleteMenu","renderEvaluationAgentSelectionMenu","selectedAgentNames","toFixed","setIsAgentUsedAsOpponent","cyclesCompleted","renderTrainingCompleteMenu","hasTrainingBeenTerminated","renderTrainingTerminatedMenu","renderTrainingInProgressMenu","traineeName","relativeRewardLists","relativeRewardList","relativeReward","getRelativeReward","performance","betStateOrAcknowledgementMenu","betState","acknowledgeable","renderAcknowledgementMenu","betStateType","Initial","renderInitialBetMenu","Following","renderFollowingBetMenu","Max","renderMaxBetMenu","acknowledgeableType","Showdown","renderShowdownAcknowledgementMenu","Fold","renderFoldAcknowledgementMenu","userStrength","opponentStrength","betInputValue","min","step","opponentInitialBet","noiseInputValue","ref","newState","setState","expectState","withPropertyValuesStringified","getUnusedAgentName","namedOpponent","getRandomBetState","inspectedPoint","inputValue","optionName","newAgent","currentAgentNamesStr","newAgentNames","arraySet","newAgentNamesStr","then","currentState","isUsed","terminateTraining","startTraining","preTrainingState","getNamedAgent","updatedTrainee","prevState","find","prevAgent","immutSetElement","removeItem","newOpponentName","placeInitialBet","placeFollowingBet","callFollowingBet","maxBetState","showdown","usedBet","fold","opponentMaxBet","forfeitedBet","isNoiseValid","Component","sort","ca","cb","diff","compareLexicographically","names","ideas","j","exclMax","temp","shuffle","idea","numbered","obj","rewards","src","index","clone","getRandomInitialBetState","opponentBets","getRandomFollowingBetState","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88fc684a.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"5dd6643fbf650d370444.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"7ab7a3f8b4487dfbe0f7.worker.js\");\n};","import { Agent, EvaluationOptions } from \"./types\";\n\nexport function evaluate(\n  a: Agent,\n  b: Agent,\n  options: EvaluationOptions\n): number {\n  let aTotal = 0;\n  let bTotal = 0;\n\n  const { hands, ante } = options;\n  for (let i = 0; i < hands; i++) {\n    if (Math.random() > 0.5) {\n      const aReward = getLeaderReward(a, b, ante);\n      aTotal += aReward;\n      bTotal -= aReward;\n    } else {\n      const bReward = getLeaderReward(b, a, ante);\n      bTotal += bReward;\n      aTotal -= bReward;\n    }\n  }\n\n  return (aTotal - bTotal) / 2;\n}\n\nfunction getLeaderReward(leader: Agent, follower: Agent, ante: number): number {\n  const leaderStrength = Math.random();\n  const leaderNoise = Math.random();\n  const leaderOutput = leader.lead(leaderStrength, leaderNoise);\n  const initialBet = Math.max(ante, leaderOutput[0]);\n  const maxBet = Math.max(initialBet, leaderOutput[1]);\n\n  const followerStrength = Math.random();\n  const followerNoise = Math.random();\n  const followingBet = Math.max(\n    ante,\n    follower.follow(followerStrength, initialBet, followerNoise)\n  );\n\n  if (followingBet < initialBet) {\n    return ante;\n  }\n\n  if (followingBet > maxBet) {\n    return -initialBet;\n  }\n\n  if (leaderStrength > followerStrength) {\n    return followingBet;\n  }\n  if (leaderStrength < followerStrength) {\n    return -followingBet;\n  }\n  return 0;\n}\n","export function isPositiveInteger(n: number): boolean {\n  return n > 0 && Math.floor(n) === n && Number.isFinite(n);\n}\n\nexport function isPositiveFiniteNumber(n: number): boolean {\n  return n > 0 && Number.isFinite(n);\n}\n\nexport function isOnInclusiveUnitInterval(n: number): boolean {\n  return 0 <= n && n <= 1;\n}\n","/** https://en.wikipedia.org/wiki/Box-Muller_transform */\nexport function normalRandom(mean: number = 0, variance: number = 1): number {\n  let u1 = 0;\n  let u2 = 0;\n\n  // Convert [0,1) to (0,1)\n  while (u1 === 0) {\n    u1 = Math.random();\n  }\n  while (u2 === 0) {\n    u2 = Math.random();\n  }\n\n  const z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  return variance * z1 + mean;\n}\n\nexport function shuffle(arr: unknown[]): void {\n  for (let i = arr.length - 1; i >= 1; i--) {\n    let j = randIntFromZeroToN(i + 1);\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction randIntFromZeroToN(exclMax: number): number {\n  return Math.floor(Math.random() * exclMax);\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface ArtichokeCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areArtichokeCreationOptionsValid(\n  options: ArtichokeCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentArtichoke implements Agent {\n  readonly agentType: AgentType.Artichoke;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Artichoke;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: ArtichokeCreationOptions): Agent {\n    return AgentArtichoke.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentArtichoke(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentArtichoke(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = noise;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = initialBet;\n    inputs[2] = noise;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    this.leaderNetwork.train(this, opponent, options);\n    this.followerNetwork.train(this, opponent, options);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  train(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","/**\n * Transforms a uniformly distributed\n * random variable on `[0, 1)` into two uniformly\n * distributed random variables (also on `[0, 1)`).\n *\n * The two output variables are written into the provided\n * `Float64Array`.\n */\nexport const splitRandomVariable: (\n  random: number,\n  out: Float64Array\n) => void = isBigEndian() ? splitBigEndian : splitLittleEndian;\n\nfunction isBigEndian(): boolean {\n  const u32 = new Uint32Array([0xaabb_ccdd]);\n  const u16 = new Uint16Array(u32.buffer);\n  if (u16[0] === 0xaabb && u16[1] === 0xccdd) {\n    return true;\n  } else if (u16[1] === 0xaabb && u16[0] === 0xccdd) {\n    return false;\n  } else {\n    throw new Error(\"Could not detect endianness.\");\n  }\n}\n\nconst _2_POW_32 = 2 ** 32;\nconst _2_POW_16 = 2 ** 16;\n\nconst splitterIn = new Uint32Array(1);\nconst splitterOut = new Uint16Array(splitterIn.buffer);\n\nfunction splitBigEndian(random: number, out: Float64Array): void {\n  splitterIn[0] = random * _2_POW_32;\n  out[0] = splitterOut[0] / _2_POW_16;\n  out[1] = splitterOut[1] / _2_POW_16;\n}\n\nfunction splitLittleEndian(random: number, out: Float64Array): void {\n  splitterIn[0] = random * _2_POW_32;\n  out[0] = splitterOut[1] / _2_POW_16;\n  out[1] = splitterOut[0] / _2_POW_16;\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\nimport { splitRandomVariable } from \"../splitRandomVariable\";\n\nexport interface BroccoliCreationOptions {}\n\nexport function areBroccoliOptionsValid(\n  _options: BroccoliCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentBroccoli implements Agent {\n  readonly agentType: AgentType.Broccoli;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: BroccoliCreationOptions): Agent {\n    return new AgentBroccoli();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentBroccoli();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Broccoli;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(_strength: number, noise: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    splitRandomVariable(noise, leadOutput);\n    return leadOutput;\n  }\n\n  follow(_strength: number, _initialBet: number, noise: number): number {\n    return noise;\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Broccoli]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface CarrotCreationOptions {}\n\nexport function areCarrotOptionsValid(\n  _options: CarrotCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentCarrot implements Agent {\n  readonly agentType: AgentType.Carrot;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: CarrotCreationOptions): Agent {\n    return new AgentCarrot();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentCarrot();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Carrot;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(strength: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    leadOutput[0] = strength;\n    leadOutput[1] = strength;\n    return leadOutput;\n  }\n\n  follow(strength: number): number {\n    return strength;\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Carrot]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface DaikonCreationOptions {\n  bet: number;\n}\n\nexport function areDaikonOptionsValid(options: DaikonCreationOptions): boolean {\n  const { bet } = options;\n  return 0 <= bet && bet <= 1;\n}\n\nexport class AgentDaikon implements Agent {\n  readonly agentType: AgentType.Daikon;\n\n  private readonly leadOutput: ReadonlyFloat64Array;\n\n  private constructor(bet: number) {\n    this.agentType = AgentType.Daikon;\n\n    this.leadOutput = new Float64Array([bet, bet]);\n  }\n\n  static fromCreationOptions(options: DaikonCreationOptions): Agent {\n    return new AgentDaikon(options.bet);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const bet = new Float64Array(buffer)[1];\n    return new AgentDaikon(bet);\n  }\n\n  lead(): ReadonlyFloat64Array {\n    return this.leadOutput;\n  }\n\n  follow(): number {\n    return this.leadOutput[0];\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    const bet = this.leadOutput[0];\n    return new Float64Array([AgentType.Daikon, bet]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface EggplantCreationOptions {}\n\nexport function areEggplantOptionsValid(\n  _options: EggplantCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentEggplant implements Agent {\n  readonly agentType: AgentType.Eggplant;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: EggplantCreationOptions): Agent {\n    return new AgentEggplant();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentEggplant();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Eggplant;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(strength: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    leadOutput[0] = strength;\n    leadOutput[1] = strength > 0.5 ? 1 : 0;\n    return leadOutput;\n  }\n\n  follow(strength: number, initialBet: number): number {\n    if (strength > 0.5) {\n      return Math.max(strength, initialBet);\n    } else {\n      return strength;\n    }\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Eggplant]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface FigCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areFigCreationOptionsValid(\n  options: FigCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentFig implements Agent {\n  readonly agentType: AgentType.Fig;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Fig;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: FigCreationOptions): Agent {\n    return AgentFig.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentFig(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentFig(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = noise;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = initialBet;\n    inputs[2] = noise;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface GrapeCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areGrapeCreationOptionsValid(\n  options: GrapeCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentGrape implements Agent {\n  readonly agentType: AgentType.Grape;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Grape;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: GrapeCreationOptions): Agent {\n    return AgentGrape.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentGrape(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentGrape(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = noise * 2 - 1;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = initialBet * 2 - 1;\n    inputs[2] = noise * 2 - 1;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface HabaneroCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areHabaneroCreationOptionsValid(\n  options: HabaneroCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentHabanero implements Agent {\n  readonly agentType: AgentType.Habanero;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Habanero;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: HabaneroCreationOptions): Agent {\n    return AgentHabanero.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentHabanero(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentHabanero(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = noise * 2 - 1;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = initialBet * 2 - 1;\n    inputs[2] = noise * 2 - 1;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = sigmoid(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { isOnInclusiveUnitInterval } from \"../numberValidation\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\nimport { splitRandomVariable } from \"../splitRandomVariable\";\n\nexport interface IlamaCreationOptions {\n  minStrength: number;\n}\n\nexport function areIlamaOptionsValid(options: IlamaCreationOptions): boolean {\n  return isOnInclusiveUnitInterval(options.minStrength);\n}\n\nexport class AgentIlama implements Agent {\n  readonly agentType: AgentType.Ilama;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: IlamaCreationOptions): Agent {\n    return new AgentIlama(options.minStrength);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const minStrength = new Float64Array(buffer)[1];\n    return new AgentIlama(minStrength);\n  }\n\n  private constructor(private readonly minStrength: number) {\n    this.agentType = AgentType.Ilama;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    splitRandomVariable(noise, leadOutput);\n\n    const isStrengthSufficient = strength >= this.minStrength;\n    leadOutput[0] *= (isStrengthSufficient as unknown) as number;\n    leadOutput[1] *= (isStrengthSufficient as unknown) as number;\n\n    return leadOutput;\n  }\n\n  follow(strength: number, _initialBet: number, noise: number): number {\n    return noise * (((strength > this.minStrength) as unknown) as number);\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Ilama, this.minStrength]).buffer;\n  }\n}\n","import { Agent } from \"../game/types\";\nimport {\n  AgentArtichoke,\n  areArtichokeCreationOptionsValid,\n  ArtichokeCreationOptions,\n} from \"./artichoke\";\nimport {\n  AgentBroccoli,\n  areBroccoliOptionsValid,\n  BroccoliCreationOptions,\n} from \"./broccoli\";\nimport {\n  AgentCarrot,\n  areCarrotOptionsValid,\n  CarrotCreationOptions,\n} from \"./carrot\";\nimport {\n  AgentDaikon,\n  areDaikonOptionsValid,\n  DaikonCreationOptions,\n} from \"./daikon\";\nimport {\n  AgentEggplant,\n  areEggplantOptionsValid,\n  EggplantCreationOptions,\n} from \"./eggplant\";\nimport {\n  AgentFig,\n  areFigCreationOptionsValid,\n  FigCreationOptions,\n} from \"./fig\";\nimport {\n  AgentGrape,\n  areGrapeCreationOptionsValid,\n  GrapeCreationOptions,\n} from \"./grape\";\nimport {\n  AgentHabanero,\n  areHabaneroCreationOptionsValid,\n  HabaneroCreationOptions,\n} from \"./habanero\";\nimport {\n  AgentIlama,\n  areIlamaOptionsValid,\n  IlamaCreationOptions,\n} from \"./ilama\";\n\nexport enum AgentType {\n  Artichoke = 1,\n  Broccoli = 2,\n  Carrot = 3,\n  Daikon = 4,\n  Eggplant = 5,\n  Fig = 6,\n  Grape = 7,\n  Habanero = 8,\n  Ilama = 9,\n}\n\nexport type AgentCreationOptions =\n  | ArtichokeCreationOptions\n  | BroccoliCreationOptions\n  | CarrotCreationOptions\n  | DaikonCreationOptions\n  | EggplantCreationOptions\n  | FigCreationOptions\n  | GrapeCreationOptions\n  | HabaneroCreationOptions\n  | IlamaCreationOptions;\n\nexport const ALL_AGENT_TYPES: AgentType[] = [\n  AgentType.Artichoke,\n  AgentType.Broccoli,\n  AgentType.Carrot,\n  AgentType.Daikon,\n  AgentType.Eggplant,\n  AgentType.Fig,\n  AgentType.Grape,\n  AgentType.Habanero,\n  AgentType.Ilama,\n];\n\nexport function deserializeAgent(buffer: ArrayBuffer): Agent {\n  const agentType = new Float64Array(buffer)[0];\n\n  if (isValidAgentType(agentType)) {\n    return deserializeAgentOfType(buffer, agentType);\n  } else {\n    throw new TypeError(\"Cannot recognize AgentType: \" + agentType);\n  }\n}\n\nfunction isValidAgentType(n: number): n is AgentType {\n  return ALL_AGENT_TYPES.includes(n);\n}\n\nfunction deserializeAgentOfType(\n  buffer: ArrayBuffer,\n  agentType: AgentType\n): Agent {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return AgentArtichoke.fromArrayBuffer(buffer);\n    case AgentType.Broccoli:\n      return AgentBroccoli.fromArrayBuffer(buffer);\n    case AgentType.Carrot:\n      return AgentCarrot.fromArrayBuffer(buffer);\n    case AgentType.Daikon:\n      return AgentDaikon.fromArrayBuffer(buffer);\n    case AgentType.Eggplant:\n      return AgentEggplant.fromArrayBuffer(buffer);\n    case AgentType.Fig:\n      return AgentFig.fromArrayBuffer(buffer);\n    case AgentType.Grape:\n      return AgentGrape.fromArrayBuffer(buffer);\n    case AgentType.Habanero:\n      return AgentHabanero.fromArrayBuffer(buffer);\n    case AgentType.Ilama:\n      return AgentIlama.fromArrayBuffer(buffer);\n  }\n}\n\nexport function createAgent(\n  agentType: AgentType,\n  creationOptions: AgentCreationOptions\n): Agent {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return AgentArtichoke.fromCreationOptions(\n        creationOptions as ArtichokeCreationOptions\n      );\n    case AgentType.Broccoli:\n      return AgentBroccoli.fromCreationOptions(\n        creationOptions as BroccoliCreationOptions\n      );\n    case AgentType.Carrot:\n      return AgentCarrot.fromCreationOptions(\n        creationOptions as CarrotCreationOptions\n      );\n    case AgentType.Daikon:\n      return AgentDaikon.fromCreationOptions(\n        creationOptions as DaikonCreationOptions\n      );\n    case AgentType.Eggplant:\n      return AgentEggplant.fromCreationOptions(\n        creationOptions as EggplantCreationOptions\n      );\n    case AgentType.Fig:\n      return AgentFig.fromCreationOptions(\n        creationOptions as FigCreationOptions\n      );\n    case AgentType.Grape:\n      return AgentGrape.fromCreationOptions(\n        creationOptions as GrapeCreationOptions\n      );\n    case AgentType.Habanero:\n      return AgentHabanero.fromCreationOptions(\n        creationOptions as HabaneroCreationOptions\n      );\n    case AgentType.Ilama:\n      return AgentIlama.fromCreationOptions(\n        creationOptions as IlamaCreationOptions\n      );\n  }\n}\n\nexport function getAgentTypeDisplayString(agentType: AgentType): string {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return \"Artichoke [Neural Network]\";\n    case AgentType.Broccoli:\n      return \"Broccoli [Random]\";\n    case AgentType.Carrot:\n      return \"Carrot [Value]\";\n    case AgentType.Daikon:\n      return \"Daikon [Constant]\";\n    case AgentType.Eggplant:\n      return \"Eggplant [Value]\";\n    case AgentType.Fig:\n      return \"Fig [Neural Network]\";\n    case AgentType.Grape:\n      return \"Grape [Neural Network]\";\n    case AgentType.Habanero:\n      return \"Habanero [Neural Network]\";\n    case AgentType.Ilama:\n      return \"Ilama [Tighter Random]\";\n  }\n}\n\nexport function getDefaultAgentCreationOptions(\n  agentType: AgentType\n): AgentCreationOptions {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Broccoli:\n      return {};\n    case AgentType.Carrot:\n      return {};\n    case AgentType.Daikon:\n      return { bet: 0.5 };\n    case AgentType.Eggplant:\n      return {};\n    case AgentType.Fig:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Grape:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Habanero:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Ilama:\n      return { minStrength: 0.4 };\n  }\n}\n\nexport function areAgentCreationOptionsValid(\n  agentType: AgentType,\n  options: AgentCreationOptions\n): boolean {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return areArtichokeCreationOptionsValid(\n        options as ArtichokeCreationOptions\n      );\n    case AgentType.Broccoli:\n      return areBroccoliOptionsValid(options as BroccoliCreationOptions);\n    case AgentType.Carrot:\n      return areCarrotOptionsValid(options as CarrotCreationOptions);\n    case AgentType.Daikon:\n      return areDaikonOptionsValid(options as DaikonCreationOptions);\n    case AgentType.Eggplant:\n      return areEggplantOptionsValid(options as EggplantCreationOptions);\n    case AgentType.Fig:\n      return areFigCreationOptionsValid(options as FigCreationOptions);\n    case AgentType.Grape:\n      return areGrapeCreationOptionsValid(options as GrapeCreationOptions);\n    case AgentType.Habanero:\n      return areHabaneroCreationOptionsValid(\n        options as HabaneroCreationOptions\n      );\n    case AgentType.Ilama:\n      return areIlamaOptionsValid(options as IlamaCreationOptions);\n  }\n}\n\nexport function cloneAgent(agent: Agent): Agent {\n  return deserializeAgent(agent.toArrayBuffer());\n}\n","export function add(arr: readonly string[], item: string): readonly string[] {\n  if (arr.includes(item)) {\n    return arr;\n  } else {\n    return arr.concat([item]);\n  }\n}\n\nexport function remove(arr: readonly string[], removedItem: string): string[] {\n  return arr.filter((item) => item !== removedItem);\n}\n\nexport function isEqual(a: readonly string[], b: readonly string[]): boolean {\n  return (\n    a.every((aElem) => b.includes(aElem)) &&\n    b.every((bElem) => a.includes(bElem))\n  );\n}\n","import { Agent } from \"./game/types\";\nimport { NamedAgent } from \"./types/state\";\n\nexport function getAgent(agents: NamedAgent[], expectedName: string): Agent {\n  for (const { name, agent } of agents) {\n    if (expectedName === name) {\n      return agent;\n    }\n  }\n\n  throw new Error(\n    \"Cannot find agent named \" +\n      JSON.stringify(expectedName) +\n      \". The only agents provided were: \" +\n      JSON.stringify(agents)\n  );\n}\n","import { EvaluationOptions } from \"../../../game/types\";\n\nexport enum EvaluationWorkerMessageType {\n  Start,\n  Done,\n}\n\nexport interface StartRequest {\n  messageType: EvaluationWorkerMessageType.Start;\n\n  agentABuffer: ArrayBuffer;\n  agentBBuffer: ArrayBuffer;\n  evaluationOptions: EvaluationOptions;\n}\n\nexport interface DoneNotification {\n  messageType: EvaluationWorkerMessageType.Done;\n\n  evaluation: number;\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport EvaluationWorker from \"worker-loader!./evaluationWorker\";\n\nexport default EvaluationWorker;\n","import { Agent, EvaluationOptions } from \"../game/types\";\nimport { evaluate } from \"../game/evaluate\";\nimport EvaluationWorker from \"./workers/evaluationWorker/evaluationWorker.importable\";\nimport {\n  EvaluationWorkerMessageType,\n  DoneNotification,\n} from \"./workers/evaluationWorker/types\";\n\nexport function promisifiedEvaluate(\n  a: Agent,\n  b: Agent,\n  evaluationOptions: EvaluationOptions,\n  useMainThread: boolean\n): Promise<number> {\n  if (useMainThread) {\n    return evaluateOnMainThread(a, b, evaluationOptions);\n  } else {\n    return evaluateOnWorker(a, b, evaluationOptions);\n  }\n}\n\nfunction evaluateOnMainThread(\n  a: Agent,\n  b: Agent,\n  evaluationOptions: EvaluationOptions\n): Promise<number> {\n  return new Promise((resolve) => {\n    resolve(evaluate(a, b, evaluationOptions));\n  });\n}\n\nfunction evaluateOnWorker(\n  a: Agent,\n  b: Agent,\n  evaluationOptions: EvaluationOptions\n): Promise<number> {\n  return new Promise((resolve) => {\n    const aBuffer = a.toArrayBuffer();\n    const bBuffer = b.toArrayBuffer();\n\n    const worker = new EvaluationWorker();\n    worker.addEventListener(\"message\", (event) => {\n      const notification: DoneNotification = event.data;\n      resolve(notification.evaluation);\n    });\n    worker.postMessage(\n      {\n        messageType: EvaluationWorkerMessageType.Start,\n        agentABuffer: aBuffer,\n        agentBBuffer: bBuffer,\n        evaluationOptions,\n      },\n      [aBuffer, bBuffer]\n    );\n  });\n}\n","import { TrainingCycleOptions } from \"../../../game/types\";\nimport { RelativeReward } from \"../../../types/state\";\n\nexport enum TrainingWorkerMessageType {\n  Start,\n  CycleComplete,\n  Done,\n}\n\nexport interface StartRequest {\n  messageType: TrainingWorkerMessageType.Start;\n\n  namedTraineeBuffer: NamedAgentBuffer;\n  namedOpponentBuffers: NamedAgentBuffer[];\n  trainingCycles: number;\n  trainingCycleOptions: TrainingCycleOptions;\n}\n\nexport interface NamedAgentBuffer {\n  agentName: string;\n  buffer: ArrayBuffer;\n}\n\nexport type TrainingWorkerNotification =\n  | CycleCompleteNotification\n  | DoneNotification;\n\nexport interface CycleCompleteNotification {\n  messageType: TrainingWorkerMessageType.CycleComplete;\n\n  cycleNumber: number;\n  namedTraineeBuffer: NamedAgentBuffer;\n  relativeRewards: RelativeReward[];\n}\n\nexport interface DoneNotification {\n  messageType: TrainingWorkerMessageType.Done;\n}\n","import { AgentCreationOptions, AgentType } from \"../agents\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\n\nexport type AppState =\n  | AgentListState\n  | OptionsState\n  | AgentCreationState\n  | AgentDeletionState\n  | EvaluationState\n  | TrainingAgentSelectionState\n  | TrainingState\n  | PlayState\n  | GraphState;\n\nexport enum StateType {\n  AgentList,\n  Options,\n  AgentCreation,\n  AgentDeletion,\n  Evaluation,\n  TrainingAgentSelection,\n  Training,\n  Play,\n  Graph,\n}\n\nexport interface StateMap {\n  [StateType.AgentList]: AgentListState;\n  [StateType.Options]: OptionsState;\n  [StateType.AgentCreation]: AgentCreationState;\n  [StateType.AgentDeletion]: AgentDeletionState;\n  [StateType.Evaluation]: EvaluationState;\n  [StateType.TrainingAgentSelection]: TrainingAgentSelectionState;\n  [StateType.Training]: TrainingState;\n  [StateType.Play]: PlayState;\n  [StateType.Graph]: GraphState;\n}\n\nexport interface AgentListState {\n  stateType: StateType.AgentList;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n}\n\nexport interface NamedAgent {\n  name: string;\n  agent: Agent;\n}\n\nexport const APP_OPTIONS_VERSION = 1;\n\nexport interface AppOptions {\n  version: typeof APP_OPTIONS_VERSION;\n  trainingCycles: number;\n  trainingCycleOptions: TrainingCycleOptions;\n  useMainThreadForExpensiveComputation: boolean;\n}\n\nexport interface OptionsState {\n  stateType: StateType.Options;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  inputValues: AppOptionInputValues;\n}\n\nexport interface AppOptionInputValues {\n  trainingCycles: string;\n  trainingCycleOptions: {\n    derivativeStep: string;\n    learningRate: string;\n    evaluationOptions: {\n      hands: string;\n      ante: string;\n    };\n  };\n}\n\nexport interface AgentCreationState {\n  stateType: StateType.AgentCreation;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  agentType: AgentType;\n  agentCreationOptionInputValues: WithStringValues<AgentCreationOptions>;\n  agentName: string;\n}\n\nexport type WithStringValues<T> = { [key in keyof T]: string };\n\nexport type WithNumberValues<T> = { [key in keyof T]: number };\n\nexport interface AgentDeletionState {\n  stateType: StateType.AgentDeletion;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  selectedAgentName: string;\n  isConfirmingDeletion: boolean;\n}\n\nexport interface EvaluationState {\n  stateType: StateType.Evaluation;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  selectedAgentNames: [string, string];\n  hasStartedEvaluation: boolean;\n  firstAgentReward: undefined | number;\n}\n\nexport interface TrainingAgentSelectionState {\n  stateType: StateType.TrainingAgentSelection;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  selectedAgentName: string;\n  /**\n   * Technically, all properties should be immutable,\n   * but `opponentNames` specifically needs to be\n   * immutable so we can assign the output of `arraySet.add()`\n   * to it.\n   */\n  opponentNames: readonly string[];\n}\n\nexport interface TrainingState {\n  stateType: StateType.Training;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  traineeName: string;\n  opponentNames: readonly string[];\n  cyclesCompleted: number;\n  relativeRewardLists: RelativeReward[][];\n  hasTrainingBeenTerminated: boolean;\n\n  terminateTraining: () => void;\n}\n\nexport interface RelativeReward {\n  opponentName: string;\n  reward: number;\n}\n\nexport interface PlayState {\n  stateType: StateType.Play;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  opponentName: string;\n  reward: number;\n  hands: number;\n\n  betState: BetState;\n  acknowledgeable: undefined | GameAcknowledgeable;\n}\n\nexport type BetState = InitialBetState | FollowingBetState | MaxBetState;\n\nexport enum BetStateType {\n  Initial,\n  Following,\n  Max,\n}\n\nexport interface InitialBetState {\n  betStateType: BetStateType.Initial;\n\n  strength: number;\n  opponentStrength: number;\n  betInputValue: string;\n}\n\nexport interface FollowingBetState {\n  betStateType: BetStateType.Following;\n\n  strength: number;\n  opponentStrength: number;\n  opponentInitialBet: number;\n  opponentMaxBet: number;\n  betInputValue: string;\n}\n\nexport interface MaxBetState {\n  betStateType: BetStateType.Max;\n\n  strength: number;\n  opponentStrength: number;\n  initialBet: number;\n  followingBet: number;\n}\n\nexport type GameAcknowledgeable = Showdown | Fold;\n\nexport enum GameAcknowledgeableType {\n  Showdown,\n  Fold,\n}\n\nexport interface Showdown {\n  acknowledgeableType: GameAcknowledgeableType.Showdown;\n\n  strength: number;\n  opponentStrength: number;\n  reward: number;\n}\n\nexport interface Fold {\n  acknowledgeableType: GameAcknowledgeableType.Fold;\n\n  reward: number;\n}\n\nexport interface GraphState {\n  stateType: StateType.Graph;\n\n  agents: NamedAgent[];\n  options: AppOptions;\n\n  graphedAgentName: string;\n  noiseInputValue: string;\n  graph: PolicyGraph;\n}\n\nexport type PolicyGraph = LeaderGraph | FollowerGraph;\n\nexport enum PolicyGraphType {\n  Leader,\n  Follower,\n}\n\nexport interface LeaderGraph {\n  policyGraphType: PolicyGraphType.Leader;\n\n  noise: number;\n  inspectedPoint: undefined | LeaderPolicyPoint;\n}\n\nexport interface LeaderPolicyPoint {\n  strength: number;\n\n  initialBet: number;\n  maxBet: number;\n}\n\nexport interface FollowerGraph {\n  policyGraphType: PolicyGraphType.Follower;\n\n  noise: number;\n  inspectedPoint: undefined | FollowerPolicyPoint;\n}\n\nexport interface FollowerPolicyPoint {\n  strength: number;\n  initialBet: number;\n\n  followingBet: number;\n}\n","// eslint-disable-next-line import/no-webpack-loader-syntax\nimport TrainingWorker from \"worker-loader!./trainingWorker\";\n\nexport default TrainingWorker;\n","import { cloneAgent, deserializeAgent } from \"../agents\";\nimport { evaluate } from \"../game/evaluate\";\nimport { TrainingCycleOptions } from \"../game/types\";\nimport { NamedAgent, RelativeReward } from \"../types/state\";\nimport TrainingWorker from \"./workers/trainingWorker/trainingWorker.importable\";\nimport {\n  TrainingWorkerMessageType,\n  TrainingWorkerNotification,\n} from \"./workers/trainingWorker/types\";\n\nexport function trainAsync(\n  traineeSource: NamedAgent,\n  opponents: NamedAgent[],\n  trainingCycles: number,\n  options: TrainingCycleOptions,\n  useMainThread: boolean,\n  onCycleComplete: (\n    cycleNumber: number,\n    trainee: NamedAgent,\n    relativeRewards: RelativeReward[],\n    terminateTraining: () => void\n  ) => void\n): void {\n  const trainee: NamedAgent = {\n    name: traineeSource.name,\n    agent: cloneAgent(traineeSource.agent),\n  };\n\n  if (useMainThread) {\n    trainOnMainThread(\n      trainee,\n      opponents,\n      trainingCycles,\n      options,\n      onCycleComplete\n    );\n  } else {\n    trainOnWorker(trainee, opponents, trainingCycles, options, onCycleComplete);\n  }\n}\n\nfunction trainOnMainThread(\n  namedTrainee: NamedAgent,\n  namedOpponents: NamedAgent[],\n  trainingCycles: number,\n  options: TrainingCycleOptions,\n  onCycleComplete: (\n    cycleNumber: number,\n    trainee: NamedAgent,\n    relativeRewards: RelativeReward[],\n    terminateTraining: () => void\n  ) => void\n): void {\n  const trainee = namedTrainee.agent;\n  const opponents = namedOpponents.map(({ agent }) => agent);\n  const opponentNames = namedOpponents.map(({ name }) => name);\n\n  const opponentCount = namedOpponents.length;\n  const { evaluationOptions } = options;\n\n  for (let cycleNumber = 0; cycleNumber < trainingCycles; cycleNumber++) {\n    {\n      const relativeRewards = new Float64Array(opponentCount);\n\n      for (\n        let opponentIndex = 0;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const opponent = opponents[opponentIndex];\n        relativeRewards[opponentIndex] = evaluate(\n          trainee,\n          opponent,\n          evaluationOptions\n        );\n      }\n\n      let strongestOpponentIndex = 0;\n      let lowestRelativeReward = relativeRewards[0];\n      for (\n        let opponentIndex = 1;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const reward = relativeRewards[opponentIndex];\n        if (reward < lowestRelativeReward) {\n          lowestRelativeReward = reward;\n          strongestOpponentIndex = opponentIndex;\n        }\n      }\n\n      const strongestOpponent = opponents[strongestOpponentIndex];\n      trainee.train(strongestOpponent, options);\n    }\n\n    {\n      const relativeRewards: RelativeReward[] = new Array(opponentCount);\n\n      for (\n        let opponentIndex = 0;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const opponent = opponents[opponentIndex];\n        relativeRewards[opponentIndex] = {\n          opponentName: opponentNames[opponentIndex],\n          reward: evaluate(trainee, opponent, evaluationOptions),\n        };\n      }\n\n      onCycleComplete(cycleNumber, namedTrainee, relativeRewards, noOp);\n    }\n  }\n}\n\nfunction noOp(): void {}\n\nfunction trainOnWorker(\n  trainee: NamedAgent,\n  opponents: NamedAgent[],\n  trainingCycles: number,\n  trainingCycleOptions: TrainingCycleOptions,\n  onCycleComplete: (\n    cycleNumber: number,\n    trainee: NamedAgent,\n    relativeRewards: RelativeReward[],\n    terminateTraining: () => void\n  ) => void\n): void {\n  const worker = new TrainingWorker();\n  const terminateWorker = worker.terminate.bind(worker);\n\n  worker.addEventListener(\"message\", (event) => {\n    const notification: TrainingWorkerNotification = event.data;\n    switch (notification.messageType) {\n      case TrainingWorkerMessageType.CycleComplete: {\n        const { namedTraineeBuffer } = notification;\n        const trainee = {\n          name: namedTraineeBuffer.agentName,\n          agent: deserializeAgent(namedTraineeBuffer.buffer),\n        };\n        const { relativeRewards } = notification;\n\n        onCycleComplete(\n          notification.cycleNumber,\n          trainee,\n          relativeRewards,\n          terminateWorker\n        );\n        break;\n      }\n      case TrainingWorkerMessageType.Done:\n        terminateWorker();\n        break;\n    }\n  });\n\n  worker.postMessage({\n    messageType: TrainingWorkerMessageType.Start,\n\n    namedTraineeBuffer: {\n      agentName: trainee.name,\n      buffer: trainee.agent.toArrayBuffer(),\n    },\n    namedOpponentBuffers: opponents.map(({ name: agentName, agent }) => ({\n      agentName,\n      buffer: agent.toArrayBuffer(),\n    })),\n    trainingCycles,\n    trainingCycleOptions,\n  });\n}\n","import { Agent } from \"./game/types\";\nimport { getAgent } from \"./getAgent\";\nimport {\n  FollowerGraph,\n  FollowerPolicyPoint,\n  GraphState,\n  LeaderGraph,\n  LeaderPolicyPoint,\n  PolicyGraphType,\n} from \"./types/state\";\n\ninterface LeaderPolicyPointWithUnadjustedMaxBet extends LeaderPolicyPoint {\n  unadjustedMaxBet: number;\n}\n\nexport const CANVAS_SIZE = 800;\n\nconst SAMPLES = 20;\nconst STEP = 1 / SAMPLES;\nconst LINE_WIDTH = 3;\nconst INITIAL_BET_LINE_STYLE = \"#ff000088\";\nconst UNADJUSTED_MAX_BET_LINE_STYLE = \"#00880088\";\nconst MAX_BET_LINE_STYLE = \"#0000ff88\";\n\nexport function paintGraph(canvas: HTMLCanvasElement, state: GraphState): void {\n  canvas.width = CANVAS_SIZE;\n  canvas.height = CANVAS_SIZE;\n  const ctx = canvas.getContext(\"2d\")!;\n\n  const agent = getAgent(state.agents, state.graphedAgentName);\n\n  const { graph } = state;\n  switch (graph.policyGraphType) {\n    case PolicyGraphType.Leader:\n      paintLeaderGraph(ctx, graph, agent);\n      break;\n    case PolicyGraphType.Follower:\n      paintFollowerGraph(ctx, graph, agent);\n      break;\n  }\n}\n\nfunction paintLeaderGraph(\n  ctx: CanvasRenderingContext2D,\n  graph: LeaderGraph,\n  agent: Agent\n): void {\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n\n  const points = getLeaderPolicyPoints(agent, graph.noise);\n\n  ctx.lineWidth = LINE_WIDTH;\n\n  const initialUnadjustedMaxBet0Y =\n    CANVAS_SIZE - CANVAS_SIZE * points[0].unadjustedMaxBet;\n  ctx.beginPath();\n  ctx.moveTo(0, initialUnadjustedMaxBet0Y);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    const x = CANVAS_SIZE * point.strength;\n    const y = CANVAS_SIZE - CANVAS_SIZE * point.unadjustedMaxBet;\n    ctx.lineTo(x, y);\n  }\n  ctx.strokeStyle = UNADJUSTED_MAX_BET_LINE_STYLE;\n  ctx.stroke();\n\n  const initialBet0Y = CANVAS_SIZE - CANVAS_SIZE * points[0].initialBet;\n  ctx.beginPath();\n  ctx.moveTo(0, initialBet0Y);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    const x = CANVAS_SIZE * point.strength;\n    const y = CANVAS_SIZE - CANVAS_SIZE * point.initialBet;\n    ctx.lineTo(x, y);\n  }\n  ctx.strokeStyle = INITIAL_BET_LINE_STYLE;\n  ctx.stroke();\n\n  const maxBet0Y = CANVAS_SIZE - CANVAS_SIZE * points[0].maxBet;\n  ctx.beginPath();\n  ctx.moveTo(0, maxBet0Y);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    const x = CANVAS_SIZE * point.strength;\n    const y = CANVAS_SIZE - CANVAS_SIZE * point.maxBet;\n    ctx.lineTo(x, y);\n  }\n  ctx.strokeStyle = MAX_BET_LINE_STYLE;\n  ctx.stroke();\n}\n\nfunction getLeaderPolicyPoints(\n  agent: Agent,\n  noise: number\n): LeaderPolicyPointWithUnadjustedMaxBet[] {\n  const x0Arr = agent.lead(0, noise);\n  const x0InitialBet = x0Arr[0];\n  const x0UnadjustedMaxBet = x0Arr[1];\n  const x0MaxBet = Math.max(x0InitialBet, x0UnadjustedMaxBet);\n  const points: LeaderPolicyPointWithUnadjustedMaxBet[] = [\n    {\n      strength: 0,\n      initialBet: x0InitialBet,\n      maxBet: x0MaxBet,\n      unadjustedMaxBet: x0UnadjustedMaxBet,\n    },\n  ];\n\n  for (let strength = STEP; strength < 1; strength += STEP) {\n    const arr = agent.lead(strength, noise);\n    const initialBet = arr[0];\n    const unadjustedMaxBet = arr[1];\n    const maxBet = Math.max(initialBet, unadjustedMaxBet);\n    points.push({ strength, initialBet, maxBet, unadjustedMaxBet });\n  }\n\n  const x1Arr = agent.lead(1, noise);\n  const x1InitialBet = x1Arr[0];\n  const x1UnadjustedMaxBet = x1Arr[1];\n  const x1MaxBet = Math.max(x1InitialBet, x1UnadjustedMaxBet);\n  points.push({\n    strength: 1,\n    initialBet: x1InitialBet,\n    maxBet: x1MaxBet,\n    unadjustedMaxBet: x1UnadjustedMaxBet,\n  });\n\n  return points;\n}\n\nfunction paintFollowerGraph(\n  ctx: CanvasRenderingContext2D,\n  graph: FollowerGraph,\n  agent: Agent\n): void {\n  ctx.clearRect(0, 0, CANVAS_SIZE, CANVAS_SIZE);\n\n  const points = getFollowerPolicyPoints(agent, graph.noise);\n\n  for (const point of points) {\n    const x = CANVAS_SIZE * point.strength;\n    const y = CANVAS_SIZE - CANVAS_SIZE * point.initialBet - CANVAS_SIZE * STEP;\n    ctx.fillStyle = getDarkness(point.followingBet);\n    ctx.fillRect(x, y, x + CANVAS_SIZE * STEP, y + CANVAS_SIZE * STEP);\n  }\n}\n\nfunction getFollowerPolicyPoints(\n  agent: Agent,\n  noise: number\n): FollowerPolicyPoint[] {\n  const points: FollowerPolicyPoint[] = [];\n\n  for (let strength = 0; strength < 1; strength += STEP) {\n    for (let initialBet = 0; initialBet < 1; initialBet += STEP) {\n      points.push({\n        strength,\n        initialBet,\n        followingBet: agent.follow(strength, initialBet, noise),\n      });\n    }\n  }\n\n  return points;\n}\n\nfunction getDarkness(n: number): string {\n  const byte = ((1 - n) * 255) | 0;\n  return \"rgb(\" + byte + \",\" + byte + \",\" + byte + \")\";\n}\n","export enum LocalStorageKeys {\n  AgentNames = \"UnitWar.AgentNames\",\n  AgentPrefix = \"UnitWar.Agent::\",\n  AppOptions = \"UnitWar.AppOptions\",\n}\n","export function decodeBytes(str: string): ArrayBuffer {\n  const numberOfBytes = toU32((str.charCodeAt(0) << 16) | str.charCodeAt(1));\n  const bytes = new Uint8Array(numberOfBytes);\n\n  for (let i = 0; i < numberOfBytes; i++) {\n    const code = str.charCodeAt(2 + Math.floor(i / 2));\n\n    const byte = i % 2 === 0 ? code >>> 8 : code;\n\n    bytes[i] = byte;\n  }\n  return bytes.buffer;\n}\n\nfunction toU32(n: number): number {\n  const arr = new Uint32Array(1);\n  arr[0] = n;\n  return arr[0];\n}\n\nexport function encodeBytes(bytes: Uint8Array): string {\n  const numberOfBytes = bytes.length;\n  const u16s = new Array(Math.ceil(numberOfBytes / 2));\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    if (i % 2 === 0) {\n      u16s[i / 2] = byte << 8;\n    } else {\n      u16s[(i - 1) / 2] |= byte;\n    }\n  }\n\n  return (\n    String.fromCharCode(\n      numberOfBytes >>> 16,\n      numberOfBytes & 0b0000_0000_0000_0000_1111_1111_1111_1111\n    ) + stringifyU16s(u16s)\n  );\n}\n\nfunction stringifyU16s(u16s: number[]): string {\n  try {\n    // This will crash in some browsers if\n    // `u16s` is too large.\n    return String.fromCharCode(...u16s);\n  } catch {\n    let out = \"\";\n\n    for (let i = 0; i < u16s.length; i++) {\n      out += String.fromCharCode(u16s[i]);\n    }\n\n    return out;\n  }\n}\n","import { AppOptions, APP_OPTIONS_VERSION } from \"../types/state\";\nimport { LocalStorageKeys } from \"./utils\";\n\nexport function getSavedAppOptions(): undefined | AppOptions {\n  const stateStr = localStorage.getItem(LocalStorageKeys.AppOptions);\n  if (stateStr === null) {\n    return;\n  }\n  const state: AppOptions = JSON.parse(stateStr);\n  if (state.version !== APP_OPTIONS_VERSION) {\n    return;\n  }\n  return state;\n}\n\nexport function saveAppOptions(options: AppOptions): void {\n  const stateStr = JSON.stringify(options);\n  localStorage.setItem(LocalStorageKeys.AppOptions, stateStr);\n}\n","import React from \"react\";\nimport {\n  AgentCreationOptions,\n  AgentType,\n  ALL_AGENT_TYPES,\n  areAgentCreationOptionsValid,\n  createAgent,\n  getAgentTypeDisplayString,\n  getDefaultAgentCreationOptions,\n} from \"./agents\";\nimport { ArtichokeCreationOptions } from \"./agents/artichoke\";\nimport { DaikonCreationOptions } from \"./agents/daikon\";\nimport { FigCreationOptions } from \"./agents/fig\";\nimport { GrapeCreationOptions } from \"./agents/grape\";\nimport { HabaneroCreationOptions } from \"./agents/habanero\";\nimport { IlamaCreationOptions } from \"./agents/ilama\";\nimport \"./App.css\";\nimport * as arraySet from \"./arraySet\";\nimport { Agent } from \"./game/types\";\nimport { getAgent } from \"./getAgent\";\nimport {\n  isOnInclusiveUnitInterval,\n  isPositiveFiniteNumber,\n  isPositiveInteger,\n} from \"./numberValidation\";\nimport { promisifiedEvaluate } from \"./offloaders/evaluate\";\nimport { trainAsync } from \"./offloaders/train\";\nimport { paintGraph } from \"./paintGraph\";\nimport { shuffle } from \"./random\";\nimport * as agentsSaver from \"./stateSavers/agentsSaver\";\nimport {\n  getSavedAppOptions,\n  saveAppOptions,\n} from \"./stateSavers/appOptionsSaver\";\nimport {\n  AgentCreationState,\n  AgentDeletionState,\n  AgentListState,\n  AppOptionInputValues,\n  AppOptions,\n  AppState,\n  APP_OPTIONS_VERSION,\n  BetState,\n  BetStateType,\n  EvaluationState,\n  Fold,\n  FollowingBetState,\n  GameAcknowledgeable,\n  GameAcknowledgeableType,\n  GraphState,\n  InitialBetState,\n  MaxBetState,\n  NamedAgent,\n  OptionsState,\n  PlayState,\n  PolicyGraphType,\n  RelativeReward,\n  Showdown,\n  StateMap,\n  StateType,\n  TrainingAgentSelectionState,\n  TrainingState,\n  WithNumberValues,\n  WithStringValues,\n} from \"./types/state\";\n\nconst DISPLAYED_DECIMALS = 3;\nconst DEFAULT_BET = 0.5;\n\nexport default class App extends React.Component<{}, AppState> {\n  private graphCanvasRef: React.RefObject<HTMLCanvasElement>;\n\n  constructor(props: {}) {\n    super(props);\n\n    (window as any).app = this;\n\n    this.graphCanvasRef = React.createRef();\n\n    this.state = getInitialState();\n\n    this.bindMethods();\n  }\n\n  bindMethods(): void {\n    this.onOptionsClick = this.onOptionsClick.bind(this);\n    this.onCreateAgentClick = this.onCreateAgentClick.bind(this);\n    this.onDeleteAgentClick = this.onDeleteAgentClick.bind(this);\n    this.onEvaluateClick = this.onEvaluateClick.bind(this);\n    this.onTrainClick = this.onTrainClick.bind(this);\n    this.onPlayClick = this.onPlayClick.bind(this);\n    this.onGraphClick = this.onGraphClick.bind(this);\n\n    this.onAgentListClick = this.onAgentListClick.bind(this);\n    this.onTrainingCyclesInputValueChange = this.onTrainingCyclesInputValueChange.bind(\n      this\n    );\n    this.onTrainingCycleDerivativeStepInputValueChange = this.onTrainingCycleDerivativeStepInputValueChange.bind(\n      this\n    );\n    this.onTrainingCycleLearningRateInputValueChange = this.onTrainingCycleLearningRateInputValueChange.bind(\n      this\n    );\n    this.onTrainingCycleEvaluationHandsInputValueChange = this.onTrainingCycleEvaluationHandsInputValueChange.bind(\n      this\n    );\n    this.onTrainingCycleEvaluationAnteInputValueChange = this.onTrainingCycleEvaluationAnteInputValueChange.bind(\n      this\n    );\n    this.onUseMainThreadChange = this.onUseMainThreadChange.bind(this);\n\n    this.onAgentNameChange = this.onAgentNameChange.bind(this);\n    this.onAgentTypeChange = this.onAgentTypeChange.bind(this);\n    this.onConfirmCreationClick = this.onConfirmCreationClick.bind(this);\n\n    this.onFirstEvaluatedAgentNameChange = this.onFirstEvaluatedAgentNameChange.bind(\n      this\n    );\n    this.onSecondEvaluatedAgentNameChange = this.onSecondEvaluatedAgentNameChange.bind(\n      this\n    );\n    this.onStartEvaluationClick = this.onStartEvaluationClick.bind(this);\n\n    this.onTraineeChange = this.onTraineeChange.bind(this);\n    this.onStartTrainingClick = this.onStartTrainingClick.bind(this);\n\n    this.onTerminateTrainingClick = this.onTerminateTrainingClick.bind(this);\n\n    this.onCancelAgentDeletionClick = this.onCancelAgentDeletionClick.bind(\n      this\n    );\n    this.onConfirmAgentDeletionClick = this.onConfirmAgentDeletionClick.bind(\n      this\n    );\n    this.onNameOfAgentToBeDeletedChange = this.onNameOfAgentToBeDeletedChange.bind(\n      this\n    );\n    this.onSelectAgentForDeletionClick = this.onSelectAgentForDeletionClick.bind(\n      this\n    );\n\n    this.onOpponentNameChange = this.onOpponentNameChange.bind(this);\n    this.onBetInputValueChange = this.onBetInputValueChange.bind(this);\n    this.onPlaceBetClick = this.onPlaceBetClick.bind(this);\n    this.onFoldClick = this.onFoldClick.bind(this);\n    this.onAcknowledgeClick = this.onAcknowledgeClick.bind(this);\n\n    this.onGraphedAgentNameChange = this.onGraphedAgentNameChange.bind(this);\n    this.onGraphTypeChange = this.onGraphTypeChange.bind(this);\n    this.onGraphNoiseChange = this.onGraphNoiseChange.bind(this);\n  }\n\n  componentDidUpdate() {\n    const { state } = this;\n    const canvas = this.graphCanvasRef.current;\n    if (state.stateType === StateType.Graph && canvas !== null) {\n      paintGraph(canvas, state);\n    }\n  }\n\n  expectState<T extends StateType>(expectedType: T): StateMap[T] {\n    const { state } = this;\n    if (state.stateType === expectedType) {\n      return state as StateMap[T];\n    }\n    throw new Error(\n      \"Expected StateType.\" +\n        StateType[expectedType] +\n        \" but got StateType.\" +\n        StateType[state.stateType] +\n        \".\"\n    );\n  }\n\n  render(): React.ReactElement {\n    const { state } = this;\n\n    switch (state.stateType) {\n      case StateType.AgentList:\n        return this.renderAgentList(state);\n      case StateType.Options:\n        return this.renderOptionsMenu(state);\n      case StateType.AgentCreation:\n        return this.renderAgentCreationMenu(state);\n      case StateType.AgentDeletion:\n        return this.renderAgentDeletionMenu(state);\n      case StateType.Evaluation:\n        return this.renderEvaluationMenu(state);\n      case StateType.TrainingAgentSelection:\n        return this.renderTrainingAgentSelectionMenu(state);\n      case StateType.Training:\n        return this.renderTrainingMenu(state);\n      case StateType.Play:\n        return this.renderPlayMenu(state);\n      case StateType.Graph:\n        return this.renderGraphMenu(state);\n    }\n  }\n\n  renderAgentList(state: AgentListState): React.ReactElement {\n    const agents = getSortedAgents(state);\n\n    return (\n      <div className=\"App\">\n        <section>\n          <h2>Agents:</h2>\n\n          <ul>\n            {agents.map(({ name: agentName, agent }) => (\n              <li key={agentName}>\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </li>\n            ))}\n          </ul>\n        </section>\n\n        <section>\n          <button onClick={this.onOptionsClick}>Options</button>\n          <button onClick={this.onCreateAgentClick}>Create agent</button>\n          <button\n            disabled={agents.length === 0}\n            onClick={this.onDeleteAgentClick}\n          >\n            Delete agent\n          </button>\n          <button disabled={agents.length === 0} onClick={this.onEvaluateClick}>\n            Evaluate\n          </button>\n          <button disabled={agents.length === 0} onClick={this.onTrainClick}>\n            Train\n          </button>\n          <button disabled={agents.length === 0} onClick={this.onPlayClick}>\n            Play\n          </button>\n          <button disabled={agents.length === 0} onClick={this.onGraphClick}>\n            Graph\n          </button>\n        </section>\n      </div>\n    );\n  }\n\n  renderOptionsMenu(state: OptionsState): React.ReactElement {\n    const { inputValues } = state;\n    return (\n      <div className=\"App\">\n        <section>\n          {\" \"}\n          <button onClick={this.onAgentListClick}>Back</button> <h2>Options</h2>\n        </section>\n\n        <section>\n          <h3>Training</h3>\n          <label>\n            Training cycles:{\" \"}\n            <input\n              className={\n                isPositiveInteger(+inputValues.trainingCycles)\n                  ? \"\"\n                  : \"InvalidInput\"\n              }\n              type=\"text\"\n              value={inputValues.trainingCycles}\n              onChange={this.onTrainingCyclesInputValueChange}\n            />\n          </label>\n          <label>\n            Derivative step:{\" \"}\n            <input\n              className={\n                isPositiveFiniteNumber(\n                  +inputValues.trainingCycleOptions.derivativeStep\n                )\n                  ? \"\"\n                  : \"InvalidInput\"\n              }\n              type=\"text\"\n              value={inputValues.trainingCycleOptions.derivativeStep}\n              onChange={this.onTrainingCycleDerivativeStepInputValueChange}\n            />\n          </label>\n          <label>\n            Learning rate:{\" \"}\n            <input\n              className={\n                isPositiveFiniteNumber(\n                  +inputValues.trainingCycleOptions.learningRate\n                )\n                  ? \"\"\n                  : \"InvalidInput\"\n              }\n              type=\"text\"\n              value={inputValues.trainingCycleOptions.learningRate}\n              onChange={this.onTrainingCycleLearningRateInputValueChange}\n            />\n          </label>\n        </section>\n\n        <section>\n          <h3>Game</h3>\n          <label>\n            Hands:{\" \"}\n            <input\n              className={\n                isPositiveInteger(\n                  +inputValues.trainingCycleOptions.evaluationOptions.hands\n                )\n                  ? \"\"\n                  : \"InvalidInput\"\n              }\n              type=\"text\"\n              value={inputValues.trainingCycleOptions.evaluationOptions.hands}\n              onChange={this.onTrainingCycleEvaluationHandsInputValueChange}\n            />\n          </label>\n          <label>\n            Ante:{\" \"}\n            <input\n              className={\n                isOnInclusiveUnitInterval(\n                  +inputValues.trainingCycleOptions.evaluationOptions.ante\n                )\n                  ? \"\"\n                  : \"InvalidInput\"\n              }\n              type=\"text\"\n              value={inputValues.trainingCycleOptions.evaluationOptions.ante}\n              onChange={this.onTrainingCycleEvaluationAnteInputValueChange}\n            />\n          </label>\n        </section>\n\n        <section>\n          <h3>Performance</h3>\n          <label>\n            Use main thread for expensive computations:{\" \"}\n            <input\n              type=\"checkbox\"\n              checked={state.options.useMainThreadForExpensiveComputation}\n              onChange={this.onUseMainThreadChange}\n            />\n          </label>\n        </section>\n      </div>\n    );\n  }\n\n  renderAgentCreationMenu(state: AgentCreationState): React.ReactElement {\n    const isAgentNameValid =\n      state.agents.every(({ name }) => name !== state.agentName) &&\n      /^[\\w.\\-,/()=]+(?:\\s*[\\w.\\-,/()=]+)*$/.test(state.agentName);\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Back</button>\n          <h2>Create agent</h2>\n        </section>\n\n        <section>\n          <label>\n            Agent name:{\" \"}\n            <input\n              className={isAgentNameValid ? \"\" : \"InvalidInput\"}\n              type=\"text\"\n              value={state.agentName}\n              onChange={this.onAgentNameChange}\n            />\n          </label>\n\n          <label>\n            Agent type:{\" \"}\n            <select value={state.agentType} onChange={this.onAgentTypeChange}>\n              {ALL_AGENT_TYPES.map((agentType) => (\n                <option key={agentType} value={agentType}>\n                  {getAgentTypeDisplayString(agentType)}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {this.renderAgentParams(state)}\n\n          <button\n            disabled={\n              !(\n                isAgentNameValid &&\n                areAgentCreationOptionsValid(\n                  state.agentType,\n                  withPropertyValuesParsedAsNumbers(\n                    state.agentCreationOptionInputValues\n                  )\n                )\n              )\n            }\n            onClick={this.onConfirmCreationClick}\n          >\n            Create\n          </button>\n        </section>\n      </div>\n    );\n  }\n\n  renderAgentParams(state: AgentCreationState): React.ReactElement | null {\n    switch (state.agentType) {\n      case AgentType.Artichoke: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          ArtichokeCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Hidden neurons:{\" \"}\n              <input\n                className={\n                  isPositiveInteger(+inputValues.hiddenLayerSize)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.hiddenLayerSize}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"hiddenLayerSize\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n\n      case AgentType.Broccoli:\n        return null;\n\n      case AgentType.Carrot:\n        return null;\n\n      case AgentType.Daikon: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          DaikonCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Bet:{\" \"}\n              <input\n                className={\n                  isOnInclusiveUnitInterval(+inputValues.bet)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.bet}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"bet\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n\n      case AgentType.Eggplant:\n        return null;\n\n      case AgentType.Fig: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          FigCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Hidden neurons:{\" \"}\n              <input\n                className={\n                  isPositiveInteger(+inputValues.hiddenLayerSize)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.hiddenLayerSize}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"hiddenLayerSize\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n\n      case AgentType.Grape: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          GrapeCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Hidden neurons:{\" \"}\n              <input\n                className={\n                  isPositiveInteger(+inputValues.hiddenLayerSize)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.hiddenLayerSize}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"hiddenLayerSize\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n\n      case AgentType.Habanero: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          HabaneroCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Hidden neurons:{\" \"}\n              <input\n                className={\n                  isPositiveInteger(+inputValues.hiddenLayerSize)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.hiddenLayerSize}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"hiddenLayerSize\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n\n      case AgentType.Ilama: {\n        const inputValues = state.agentCreationOptionInputValues as WithStringValues<\n          IlamaCreationOptions\n        >;\n        return (\n          <section>\n            <h3>Agent options</h3>\n            <label>\n              Minimum playable strength:{\" \"}\n              <input\n                className={\n                  isOnInclusiveUnitInterval(+inputValues.minStrength)\n                    ? \"\"\n                    : \"InvalidInput\"\n                }\n                type=\"text\"\n                value={inputValues.minStrength}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  this.changeAgentCreationOptionInputValue(\n                    \"minStrength\",\n                    event.target.value\n                  )\n                }\n              />\n            </label>\n          </section>\n        );\n      }\n    }\n  }\n\n  renderAgentDeletionMenu(state: AgentDeletionState): React.ReactElement {\n    const agents = getSortedAgents(state);\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Back</button>\n          <h2>Delete agent</h2>\n        </section>\n\n        {state.isConfirmingDeletion ? (\n          <section>\n            <p>\n              Are you sure you want to delete {state.selectedAgentName} (\n              {getAgentTypeDisplayString(\n                getAgent(state.agents, state.selectedAgentName).agentType\n              )}\n              )?\n            </p>\n\n            <p>\n              The deletion will be permanent, and it will be impossible to\n              restore this agent.\n            </p>\n\n            <section>\n              <button onClick={this.onCancelAgentDeletionClick}>Cancel</button>\n              <button\n                className=\"DangerButton\"\n                onClick={this.onConfirmAgentDeletionClick}\n              >\n                Confirm\n              </button>\n            </section>\n          </section>\n        ) : (\n          <section>\n            <label>\n              Choose an agent to delete:{\" \"}\n              <select\n                value={state.selectedAgentName}\n                onChange={this.onNameOfAgentToBeDeletedChange}\n              >\n                {agents.map(({ name: agentName, agent }) => (\n                  <option key={agentName} value={agentName}>\n                    {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n                  </option>\n                ))}\n              </select>\n              <button onClick={this.onSelectAgentForDeletionClick}>\n                Select\n              </button>\n            </label>\n          </section>\n        )}\n      </div>\n    );\n  }\n\n  renderEvaluationMenu(state: EvaluationState): React.ReactElement {\n    if (!state.hasStartedEvaluation) {\n      return this.renderEvaluationAgentSelectionMenu(state);\n    } else {\n      const { firstAgentReward } = state;\n      if (firstAgentReward === undefined) {\n        return this.renderEvaluationInProgressMenu(state);\n      } else {\n        return this.renderEvaluationCompleteMenu(state, firstAgentReward);\n      }\n    }\n  }\n\n  renderEvaluationAgentSelectionMenu(\n    state: EvaluationState\n  ): React.ReactElement {\n    const { selectedAgentNames } = state;\n    const agents = getSortedAgents(state);\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Back</button>\n          <h2>Evaluate</h2>\n        </section>\n\n        <section>\n          Evaluate{\" \"}\n          <select\n            value={selectedAgentNames[0]}\n            onChange={this.onFirstEvaluatedAgentNameChange}\n          >\n            {agents.map(({ name: agentName, agent }) => (\n              <option value={agentName} key={agentName}>\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </option>\n            ))}\n          </select>{\" \"}\n          against{\" \"}\n          <select\n            value={selectedAgentNames[1]}\n            onChange={this.onSecondEvaluatedAgentNameChange}\n          >\n            {agents.map(({ name: agentName, agent }) => (\n              <option value={agentName} key={agentName}>\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </option>\n            ))}\n          </select>\n          <button onClick={this.onStartEvaluationClick}>Start</button>\n        </section>\n      </div>\n    );\n  }\n\n  renderEvaluationInProgressMenu(state: EvaluationState): React.ReactElement {\n    const { selectedAgentNames } = state;\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Cancel</button>\n          <h2>Evaluate</h2>\n        </section>\n\n        <section>\n          Evaluating {selectedAgentNames[0]} (\n          {getAgentTypeDisplayString(\n            getAgent(state.agents, selectedAgentNames[0]).agentType\n          )}\n          ) against {selectedAgentNames[1]} (\n          {getAgentTypeDisplayString(\n            getAgent(state.agents, selectedAgentNames[1]).agentType\n          )}\n          ...\n        </section>\n      </div>\n    );\n  }\n\n  renderEvaluationCompleteMenu(\n    state: EvaluationState,\n    firstAgentReward: number\n  ): React.ReactElement {\n    const { selectedAgentNames } = state;\n    const { hands } = state.options.trainingCycleOptions.evaluationOptions;\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Done</button>\n          <h2>Evaluate</h2>\n        </section>\n\n        <section>\n          Evaluated {selectedAgentNames[0]} (\n          {getAgentTypeDisplayString(\n            getAgent(state.agents, selectedAgentNames[0]).agentType\n          )}\n          ) against {selectedAgentNames[1]} (\n          {getAgentTypeDisplayString(\n            getAgent(state.agents, selectedAgentNames[1]).agentType\n          )}\n          ): {firstAgentReward > 0 ? \"+\" : \"\"}\n          {firstAgentReward.toFixed(DISPLAYED_DECIMALS)} (\n          {((100 * (firstAgentReward + hands)) / (2 * hands)).toFixed(2)}%)\n        </section>\n      </div>\n    );\n  }\n\n  renderTrainingAgentSelectionMenu(\n    state: TrainingAgentSelectionState\n  ): React.ReactElement {\n    const agents = getSortedAgents(state);\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Back</button>\n          <h2>Train</h2>\n        </section>\n\n        <section>\n          Train{\" \"}\n          <select\n            value={state.selectedAgentName}\n            onChange={this.onTraineeChange}\n          >\n            {agents.map(({ name: agentName, agent }) => (\n              <option value={agentName} key={agentName}>\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </option>\n            ))}\n          </select>{\" \"}\n          against:{\" \"}\n          <section>\n            {agents.map(({ name: agentName, agent }) => (\n              <label key={agentName}>\n                <input\n                  type=\"checkbox\"\n                  checked={state.opponentNames.includes(agentName)}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                    this.setIsAgentUsedAsOpponent(\n                      agentName,\n                      event.target.checked\n                    )\n                  }\n                />{\" \"}\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </label>\n            ))}\n          </section>\n          <button\n            disabled={state.opponentNames.length < 1}\n            onClick={this.onStartTrainingClick}\n          >\n            Start\n          </button>\n        </section>\n      </div>\n    );\n  }\n\n  renderTrainingMenu(state: TrainingState): React.ReactElement {\n    if (state.cyclesCompleted === state.options.trainingCycles) {\n      return this.renderTrainingCompleteMenu(state);\n    } else if (state.hasTrainingBeenTerminated) {\n      return this.renderTrainingTerminatedMenu(state);\n    } else {\n      return this.renderTrainingInProgressMenu(state);\n    }\n  }\n\n  renderTrainingCompleteMenu(state: TrainingState): React.ReactElement {\n    const agents = getSortedAgents(state);\n    const { hands } = state.options.trainingCycleOptions.evaluationOptions;\n    const opponents = state.opponentNames.map((opponentName) => ({\n      name: opponentName,\n      agent: getAgent(agents, opponentName),\n    }));\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Done</button>{\" \"}\n          <h2>Training</h2>\n        </section>\n\n        <section>\n          Finished training {state.traineeName} (\n          {getAgentTypeDisplayString(\n            getAgent(agents, state.traineeName).agentType\n          )}\n          ) against:{\" \"}\n          <section>\n            <ol className=\"Unnumbered\">\n              {state.relativeRewardLists.map((relativeRewardList, i) => {\n                return (\n                  <li key={i}>\n                    Cycle {i}:\n                    <ul>\n                      {opponents.map(({ name: agentName, agent }) => {\n                        const relativeReward = getRelativeReward(\n                          relativeRewardList,\n                          agentName\n                        );\n                        const performance =\n                          (relativeReward + hands) / (2 * hands);\n                        return (\n                          <li key={agentName}>\n                            <label>\n                              {agentName} (\n                              {getAgentTypeDisplayString(agent.agentType)}\n                              ): {relativeReward.toFixed(DISPLAYED_DECIMALS)} (\n                              {(performance * 100).toFixed(2)}%)\n                            </label>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </li>\n                );\n              })}\n            </ol>\n          </section>\n        </section>\n      </div>\n    );\n  }\n\n  renderTrainingTerminatedMenu(state: TrainingState): React.ReactElement {\n    const agents = getSortedAgents(state);\n    const { hands } = state.options.trainingCycleOptions.evaluationOptions;\n    const opponents = state.opponentNames.map((opponentName) => ({\n      name: opponentName,\n      agent: getAgent(agents, opponentName),\n    }));\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Done</button>{\" \"}\n          <h2>Training</h2>\n        </section>\n\n        <section>\n          Terminated training {state.traineeName} (\n          {getAgentTypeDisplayString(\n            getAgent(agents, state.traineeName).agentType\n          )}\n          ) against:{\" \"}\n          <section>\n            <ol className=\"Unnumbered\">\n              {state.relativeRewardLists.map((relativeRewardList, i) => {\n                return (\n                  <li key={i}>\n                    Cycle {i}:\n                    <ul>\n                      {opponents.map(({ name: agentName, agent }) => {\n                        const relativeReward = getRelativeReward(\n                          relativeRewardList,\n                          agentName\n                        );\n                        const performance =\n                          (relativeReward + hands) / (2 * hands);\n                        return (\n                          <li key={agentName}>\n                            <label>\n                              {agentName} (\n                              {getAgentTypeDisplayString(agent.agentType)}\n                              ): {relativeReward.toFixed(DISPLAYED_DECIMALS)} (\n                              {(performance * 100).toFixed(2)}%)\n                            </label>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </li>\n                );\n              })}\n            </ol>\n          </section>\n        </section>\n      </div>\n    );\n  }\n\n  renderTrainingInProgressMenu(state: TrainingState): React.ReactElement {\n    const agents = getSortedAgents(state);\n    const { hands } = state.options.trainingCycleOptions.evaluationOptions;\n    const opponents = state.opponentNames.map((opponentName) => ({\n      name: opponentName,\n      agent: getAgent(agents, opponentName),\n    }));\n\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onTerminateTrainingClick}>Terminate</button>{\" \"}\n          <h2>Training</h2>\n        </section>\n\n        <section>\n          Training {state.traineeName} (\n          {getAgentTypeDisplayString(\n            getAgent(agents, state.traineeName).agentType\n          )}\n          ) against:{\" \"}\n          <section>\n            <ol className=\"Unnumbered\">\n              {state.relativeRewardLists.map((relativeRewardList, i) => {\n                return (\n                  <li key={i}>\n                    Cycle {i}:\n                    <ul>\n                      {opponents.map(({ name: agentName, agent }) => {\n                        const relativeReward = getRelativeReward(\n                          relativeRewardList,\n                          agentName\n                        );\n                        const performance =\n                          (relativeReward + hands) / (2 * hands);\n                        return (\n                          <li key={agentName}>\n                            <label>\n                              {agentName} (\n                              {getAgentTypeDisplayString(agent.agentType)}\n                              ): {relativeReward.toFixed(DISPLAYED_DECIMALS)} (\n                              {(performance * 100).toFixed(2)}%)\n                            </label>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  </li>\n                );\n              })}\n            </ol>\n          </section>\n        </section>\n      </div>\n    );\n  }\n\n  renderPlayMenu(state: PlayState): React.ReactElement {\n    const { betState, acknowledgeable } = state;\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n\n    let betStateOrAcknowledgementMenu: React.ReactElement;\n    if (acknowledgeable !== undefined) {\n      betStateOrAcknowledgementMenu = this.renderAcknowledgementMenu(\n        acknowledgeable\n      );\n    } else {\n      switch (betState.betStateType) {\n        case BetStateType.Initial:\n          betStateOrAcknowledgementMenu = this.renderInitialBetMenu(\n            betState,\n            ante\n          );\n          break;\n        case BetStateType.Following:\n          betStateOrAcknowledgementMenu = this.renderFollowingBetMenu(betState);\n          break;\n        case BetStateType.Max:\n          betStateOrAcknowledgementMenu = this.renderMaxBetMenu(betState);\n          break;\n      }\n    }\n\n    const agents = getSortedAgents(state);\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Quit</button>\n          <h2>Play</h2>\n        </section>\n\n        <section>\n          <label className=\"PlayMenuLabel\">\n            Playing{\" \"}\n            <select\n              value={state.opponentName}\n              onChange={this.onOpponentNameChange}\n            >\n              {agents.map(({ name: agentName, agent }) => (\n                <option key={agentName} value={agentName}>\n                  {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n                </option>\n              ))}\n            </select>\n          </label>\n\n          <label className=\"PlayMenuLabel\">Hands played: {state.hands}</label>\n\n          <label className=\"PlayMenuLabel\">\n            Reward: {state.reward.toFixed(DISPLAYED_DECIMALS)}\n          </label>\n\n          {state.hands === 0 ? (\n            <label className=\"PlayMenuLabel\">Performance: 50.00%</label>\n          ) : (\n            <label className=\"PlayMenuLabel\">\n              Performance:{\" \"}\n              {(\n                (100 * (state.reward + state.hands)) /\n                (2 * state.hands)\n              ).toFixed(2)}\n              %\n            </label>\n          )}\n        </section>\n\n        {betStateOrAcknowledgementMenu}\n      </div>\n    );\n  }\n\n  renderAcknowledgementMenu(\n    acknowledgeable: GameAcknowledgeable\n  ): React.ReactElement {\n    switch (acknowledgeable.acknowledgeableType) {\n      case GameAcknowledgeableType.Showdown:\n        return this.renderShowdownAcknowledgementMenu(acknowledgeable);\n      case GameAcknowledgeableType.Fold:\n        return this.renderFoldAcknowledgementMenu(acknowledgeable);\n    }\n  }\n\n  renderShowdownAcknowledgementMenu(\n    acknowledgeable: Showdown\n  ): React.ReactElement {\n    const {\n      strength: userStrength,\n      opponentStrength,\n      reward,\n    } = acknowledgeable;\n    if (reward > 0) {\n      return (\n        <section>\n          <p>You won {reward}.</p>\n          <p>Your strength: {userStrength}</p>\n          <p>Opponent strength: {opponentStrength}</p>\n          <button onClick={this.onAcknowledgeClick}>Continue</button>\n        </section>\n      );\n    } else if (reward < 0) {\n      return (\n        <section>\n          <p>You lost {-reward}.</p>\n          <p>Your strength: {userStrength}</p>\n          <p>Opponent strength: {opponentStrength}</p>\n          <button onClick={this.onAcknowledgeClick}>Continue</button>\n        </section>\n      );\n    } else {\n      return (\n        <section>\n          You and your opponent both had a strength of {userStrength}, so\n          nothing was won or lost.\n          <button onClick={this.onAcknowledgeClick}>Continue</button>\n        </section>\n      );\n    }\n  }\n\n  renderFoldAcknowledgementMenu(acknowledgeable: Fold): React.ReactElement {\n    const { reward } = acknowledgeable;\n    if (reward > 0) {\n      return (\n        <section>\n          <p>You won {reward} because your opponent folded.</p>\n          <button onClick={this.onAcknowledgeClick}>Continue</button>\n        </section>\n      );\n    } else {\n      return (\n        <section>\n          <p>You lost {-reward} by folding.</p>\n          <button onClick={this.onAcknowledgeClick}>Continue</button>\n        </section>\n      );\n    }\n  }\n\n  renderInitialBetMenu(\n    betState: InitialBetState,\n    ante: number\n  ): React.ReactElement {\n    return (\n      <section>\n        <h3>You are betting first.</h3>\n        <label className=\"BetMenuLabel\">Strength: {betState.strength}</label>\n        <label className=\"BetMenuLabel\">\n          Your initial bet:{\" \"}\n          <input\n            className={\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= ante\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"text\"\n            value={betState.betInputValue}\n            onChange={this.onBetInputValueChange}\n          />\n          <input\n            className={\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= ante\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"range\"\n            min={ante}\n            max={1}\n            step={0.001}\n            value={+betState.betInputValue}\n            onChange={this.onBetInputValueChange}\n          />\n        </label>\n        <button\n          disabled={\n            !(\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= ante\n            )\n          }\n          onClick={this.onPlaceBetClick}\n        >\n          Place bet\n        </button>\n      </section>\n    );\n  }\n\n  renderFollowingBetMenu(betState: FollowingBetState): React.ReactElement {\n    const initialBet = betState.opponentInitialBet;\n    return (\n      <section>\n        <h3>You are betting second.</h3>\n        <label className=\"BetMenuLabel\">Strength: {betState.strength}</label>\n        <label className=\"BetMenuLabel\">Opponent's bet: {initialBet}</label>\n        <label className=\"BetMenuLabel\">\n          Your bet:{\" \"}\n          <input\n            className={\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= initialBet\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"text\"\n            value={betState.betInputValue}\n            onChange={this.onBetInputValueChange}\n          />\n          <input\n            className={\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= initialBet\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"range\"\n            min={initialBet}\n            max={1}\n            step={0.001}\n            value={+betState.betInputValue}\n            onChange={this.onBetInputValueChange}\n          />\n        </label>\n\n        <button\n          disabled={\n            !(\n              isOnInclusiveUnitInterval(+betState.betInputValue) &&\n              +betState.betInputValue >= initialBet\n            )\n          }\n          onClick={this.onPlaceBetClick}\n        >\n          Place bet\n        </button>\n        <button onClick={this.onFoldClick}>Fold</button>\n      </section>\n    );\n  }\n\n  renderMaxBetMenu(betState: MaxBetState): React.ReactElement {\n    return (\n      <section>\n        <h3>Your opponent raised.</h3>\n        <label className=\"BetMenuLabel\">Strength: {betState.strength}</label>\n        <label className=\"BetMenuLabel\">\n          Your initial bet: {betState.initialBet}\n        </label>\n        <label className=\"BetMenuLabel\">\n          Opponent's bet: {betState.followingBet}\n        </label>\n\n        <button onClick={this.onPlaceBetClick}>Call</button>\n        <button onClick={this.onFoldClick}>Fold</button>\n      </section>\n    );\n  }\n\n  renderGraphMenu(state: GraphState): React.ReactElement {\n    const agents = getSortedAgents(state);\n    return (\n      <div className=\"App\">\n        <section>\n          <button onClick={this.onAgentListClick}>Back</button>\n          <h2>Graph</h2>\n        </section>\n\n        <label>\n          Agent:{\" \"}\n          <select\n            value={state.graphedAgentName}\n            onChange={this.onGraphedAgentNameChange}\n          >\n            {agents.map(({ name: agentName, agent }) => (\n              <option key={agentName} value={agentName}>\n                {agentName} ({getAgentTypeDisplayString(agent.agentType)})\n              </option>\n            ))}\n          </select>\n        </label>\n\n        <label>\n          Component:{\" \"}\n          <select\n            value={state.graph.policyGraphType}\n            onChange={this.onGraphTypeChange}\n          >\n            <option value={PolicyGraphType.Leader}>Leader</option>\n            <option value={PolicyGraphType.Follower}>Follower</option>\n          </select>\n        </label>\n\n        <label>\n          Noise:{\" \"}\n          <input\n            className={\n              +state.noiseInputValue === 1\n                ? \"DiscouragedInput\"\n                : isOnInclusiveUnitInterval(+state.noiseInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"text\"\n            value={state.noiseInputValue}\n            onChange={this.onGraphNoiseChange}\n          />\n          <input\n            className={\n              isOnInclusiveUnitInterval(+state.noiseInputValue)\n                ? \"\"\n                : \"InvalidInput\"\n            }\n            type=\"range\"\n            min={0}\n            max={1}\n            step={0.001}\n            value={state.graph.noise}\n            onChange={this.onGraphNoiseChange}\n          />\n        </label>\n\n        <table>\n          <tbody>\n            <tr>\n              <td>Bet</td>\n              <td>\n                <canvas className=\"PolicyGraph\" ref={this.graphCanvasRef} />\n              </td>\n            </tr>\n            <tr>\n              <td />\n              <td>Strength</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <section>\n          <h3>Key</h3>\n          {state.graph.policyGraphType === PolicyGraphType.Leader ? (\n            <>\n              <p className=\"Key__InitialBet\">Red = initial bet</p>\n              <p className=\"Key__UnclampedMaxBet\">Green = unclamped max bet</p>\n              <p className=\"Key__ClampedMaxBet\">\n                Blue = clamped max bet = max(initial bet, unclamped max bet)\n              </p>\n            </>\n          ) : (\n            <>\n              <p>Lighter = lower bet (white = 0)</p>\n              <p>Darker = higher bet (black = 1)</p>\n            </>\n          )}\n        </section>\n      </div>\n    );\n  }\n\n  onOptionsClick(): void {\n    const { state } = this;\n    const newState: OptionsState = {\n      stateType: StateType.Options,\n\n      agents: state.agents,\n      options: state.options,\n\n      inputValues: getInputValuesForAppOptions(state.options),\n    };\n    this.setState(newState);\n  }\n\n  onCreateAgentClick(): void {\n    const state = this.expectState(StateType.AgentList);\n    const newState: AgentCreationState = {\n      stateType: StateType.AgentCreation,\n\n      agents: state.agents,\n      options: state.options,\n\n      agentType: AgentType.Artichoke,\n      agentCreationOptionInputValues: withPropertyValuesStringified(\n        getDefaultAgentCreationOptions(AgentType.Artichoke)\n      ),\n      agentName: getUnusedAgentName(state.agents.map(({ name }) => name)),\n    };\n    this.setState(newState);\n  }\n\n  onDeleteAgentClick(): void {\n    const state = this.expectState(StateType.AgentList);\n    const newState: AgentDeletionState = {\n      stateType: StateType.AgentDeletion,\n\n      agents: state.agents,\n      options: state.options,\n\n      selectedAgentName: state.agents[0].name,\n      isConfirmingDeletion: false,\n    };\n    this.setState(newState);\n  }\n\n  onEvaluateClick(): void {\n    const state = this.expectState(StateType.AgentList);\n    const newState: EvaluationState = {\n      stateType: StateType.Evaluation,\n\n      agents: state.agents,\n      options: state.options,\n\n      selectedAgentNames:\n        state.agents.length >= 2\n          ? [state.agents[0].name, state.agents[1].name]\n          : [state.agents[0].name, state.agents[0].name],\n      hasStartedEvaluation: false,\n      firstAgentReward: undefined,\n    };\n    this.setState(newState);\n  }\n\n  onTrainClick(): void {\n    const { state } = this;\n    const newState: TrainingAgentSelectionState = {\n      stateType: StateType.TrainingAgentSelection,\n\n      agents: state.agents,\n      options: state.options,\n\n      selectedAgentName: state.agents[0].name,\n      opponentNames: [],\n    };\n    this.setState(newState);\n  }\n\n  onPlayClick(): void {\n    const { state } = this;\n    const namedOpponent = state.agents[0];\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n\n    const newState: PlayState = {\n      stateType: StateType.Play,\n\n      agents: state.agents,\n      options: state.options,\n\n      opponentName: namedOpponent.name,\n      reward: 0,\n      hands: 0,\n\n      betState: getRandomBetState(namedOpponent.agent, ante),\n      acknowledgeable: undefined,\n    };\n    this.setState(newState);\n  }\n\n  onGraphClick(): void {\n    const { state } = this;\n\n    const noise = Math.random();\n    const newState: GraphState = {\n      stateType: StateType.Graph,\n\n      agents: state.agents,\n      options: state.options,\n\n      graphedAgentName: state.agents[0].name,\n      noiseInputValue: \"\" + noise,\n      graph: {\n        policyGraphType: PolicyGraphType.Leader,\n\n        noise,\n        inspectedPoint: undefined,\n      },\n    };\n    this.setState(newState);\n  }\n\n  onAgentListClick(): void {\n    const { state } = this;\n    const newState: AgentListState = {\n      stateType: StateType.AgentList,\n\n      agents: state.agents,\n      options: state.options,\n    };\n    this.setState(newState);\n  }\n\n  onTrainingCyclesInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Options);\n    const inputValue = event.target.value;\n\n    const inputValues: AppOptionInputValues = {\n      ...state.inputValues,\n      trainingCycles: inputValue,\n    };\n\n    if (isPositiveInteger(+inputValue)) {\n      const options: AppOptions = {\n        ...state.options,\n        trainingCycles: +inputValue,\n      };\n      saveAppOptions(options);\n\n      const newState: OptionsState = { ...state, inputValues, options };\n      this.setState(newState);\n    } else {\n      const newState: OptionsState = { ...state, inputValues };\n      this.setState(newState);\n    }\n  }\n\n  onTrainingCycleDerivativeStepInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Options);\n    const inputValue = event.target.value;\n\n    const inputValues: AppOptionInputValues = {\n      ...state.inputValues,\n      trainingCycleOptions: {\n        ...state.inputValues.trainingCycleOptions,\n        derivativeStep: inputValue,\n      },\n    };\n\n    if (isPositiveFiniteNumber(+inputValue)) {\n      const options: AppOptions = {\n        ...state.options,\n        trainingCycleOptions: {\n          ...state.options.trainingCycleOptions,\n          derivativeStep: +inputValue,\n        },\n      };\n      saveAppOptions(options);\n\n      const newState: OptionsState = { ...state, inputValues, options };\n      this.setState(newState);\n    } else {\n      const newState: OptionsState = { ...state, inputValues };\n      this.setState(newState);\n    }\n  }\n\n  onTrainingCycleLearningRateInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Options);\n    const inputValue = event.target.value;\n\n    const inputValues: AppOptionInputValues = {\n      ...state.inputValues,\n      trainingCycleOptions: {\n        ...state.inputValues.trainingCycleOptions,\n        learningRate: inputValue,\n      },\n    };\n\n    if (isPositiveFiniteNumber(+inputValue)) {\n      const options: AppOptions = {\n        ...state.options,\n        trainingCycleOptions: {\n          ...state.options.trainingCycleOptions,\n          learningRate: +inputValue,\n        },\n      };\n      saveAppOptions(options);\n\n      const newState: OptionsState = { ...state, inputValues, options };\n      this.setState(newState);\n    } else {\n      const newState: OptionsState = { ...state, inputValues };\n      this.setState(newState);\n    }\n  }\n\n  onTrainingCycleEvaluationHandsInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Options);\n    const inputValue = event.target.value;\n\n    const inputValues: AppOptionInputValues = {\n      ...state.inputValues,\n      trainingCycleOptions: {\n        ...state.inputValues.trainingCycleOptions,\n        evaluationOptions: {\n          ...state.inputValues.trainingCycleOptions.evaluationOptions,\n          hands: inputValue,\n        },\n      },\n    };\n\n    if (isPositiveInteger(+inputValue)) {\n      const options: AppOptions = {\n        ...state.options,\n        trainingCycleOptions: {\n          ...state.options.trainingCycleOptions,\n          evaluationOptions: {\n            ...state.options.trainingCycleOptions.evaluationOptions,\n            hands: +inputValue,\n          },\n        },\n      };\n      saveAppOptions(options);\n\n      const newState: OptionsState = { ...state, inputValues, options };\n      this.setState(newState);\n    } else {\n      const newState: OptionsState = { ...state, inputValues };\n      this.setState(newState);\n    }\n  }\n\n  onTrainingCycleEvaluationAnteInputValueChange(\n    event: React.ChangeEvent<HTMLInputElement>\n  ): void {\n    const state = this.expectState(StateType.Options);\n    const inputValue = event.target.value;\n\n    const inputValues: AppOptionInputValues = {\n      ...state.inputValues,\n      trainingCycleOptions: {\n        ...state.inputValues.trainingCycleOptions,\n        evaluationOptions: {\n          ...state.inputValues.trainingCycleOptions.evaluationOptions,\n          ante: inputValue,\n        },\n      },\n    };\n\n    if (isOnInclusiveUnitInterval(+inputValue)) {\n      const options: AppOptions = {\n        ...state.options,\n        trainingCycleOptions: {\n          ...state.options.trainingCycleOptions,\n          evaluationOptions: {\n            ...state.options.trainingCycleOptions.evaluationOptions,\n            ante: +inputValue,\n          },\n        },\n      };\n      saveAppOptions(options);\n\n      const newState: OptionsState = { ...state, inputValues, options };\n      this.setState(newState);\n    } else {\n      const newState: OptionsState = { ...state, inputValues };\n      this.setState(newState);\n    }\n  }\n\n  onUseMainThreadChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Options);\n\n    const options: AppOptions = {\n      ...state.options,\n      useMainThreadForExpensiveComputation: event.target.checked,\n    };\n    saveAppOptions(options);\n\n    const newState: OptionsState = { ...state, options };\n    this.setState(newState);\n  }\n\n  onAgentNameChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.AgentCreation);\n    const newState: AgentCreationState = {\n      ...state,\n      agentName: event.target.value,\n    };\n    this.setState(newState);\n  }\n\n  onAgentTypeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const state = this.expectState(StateType.AgentCreation);\n    const agentType: AgentType = +event.target.value;\n\n    if (!(agentType in AgentType)) {\n      throw new Error(\"Unrecognized AgentType: \" + agentType);\n    }\n\n    const newState: AgentCreationState = {\n      ...state,\n      agentType,\n      agentCreationOptionInputValues: withPropertyValuesStringified(\n        getDefaultAgentCreationOptions(agentType)\n      ),\n    };\n    this.setState(newState);\n  }\n\n  changeAgentCreationOptionInputValue<T extends AgentCreationOptions>(\n    optionName: keyof T,\n    value: string\n  ): void {\n    const state = this.expectState(StateType.AgentCreation);\n    const newState: AgentCreationState = {\n      ...state,\n      agentCreationOptionInputValues: {\n        ...state.agentCreationOptionInputValues,\n        [optionName]: value,\n      },\n    };\n    this.setState(newState);\n  }\n\n  onConfirmCreationClick(): void {\n    const state = this.expectState(StateType.AgentCreation);\n    const newAgent = {\n      name: state.agentName,\n      agent: createAgent(\n        state.agentType,\n        withPropertyValuesParsedAsNumbers(state.agentCreationOptionInputValues)\n      ),\n    };\n    agentsSaver.addAgent(newAgent);\n\n    const newState: AgentListState = {\n      stateType: StateType.AgentList,\n\n      agents: state.agents.concat([newAgent]),\n      options: state.options,\n    };\n    this.setState(newState);\n  }\n\n  onFirstEvaluatedAgentNameChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ): void {\n    const state = this.expectState(StateType.Evaluation);\n    const newState: EvaluationState = {\n      ...state,\n      selectedAgentNames: [event.target.value, state.selectedAgentNames[1]],\n    };\n    this.setState(newState);\n  }\n\n  onSecondEvaluatedAgentNameChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ): void {\n    const state = this.expectState(StateType.Evaluation);\n    const newState: EvaluationState = {\n      ...state,\n      selectedAgentNames: [state.selectedAgentNames[0], event.target.value],\n    };\n    this.setState(newState);\n  }\n\n  onStartEvaluationClick(): void {\n    const state = this.expectState(StateType.Evaluation);\n\n    if (state.hasStartedEvaluation) {\n      return;\n    }\n\n    {\n      const newState: EvaluationState = {\n        ...state,\n        hasStartedEvaluation: true,\n      };\n      this.setState(newState);\n    }\n\n    const firstAgent = getAgent(state.agents, state.selectedAgentNames[0]);\n    const secondAgent = getAgent(state.agents, state.selectedAgentNames[1]);\n    promisifiedEvaluate(\n      firstAgent,\n      secondAgent,\n      state.options.trainingCycleOptions.evaluationOptions,\n      state.options.useMainThreadForExpensiveComputation\n    ).then((firstAgentReward) => {\n      const currentState = this.state;\n      if (\n        currentState.stateType === StateType.Evaluation &&\n        currentState.selectedAgentNames[0] === state.selectedAgentNames[0] &&\n        currentState.selectedAgentNames[1] === state.selectedAgentNames[1]\n      ) {\n        const newState: EvaluationState = { ...currentState, firstAgentReward };\n        this.setState(newState);\n      }\n    });\n  }\n\n  onTraineeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const state = this.expectState(StateType.TrainingAgentSelection);\n    const newState: TrainingAgentSelectionState = {\n      ...state,\n      selectedAgentName: event.target.value,\n    };\n    this.setState(newState);\n  }\n\n  setIsAgentUsedAsOpponent(agentName: string, isUsed: boolean): void {\n    const state = this.expectState(StateType.TrainingAgentSelection);\n    const newState: TrainingAgentSelectionState = {\n      ...state,\n      opponentNames: isUsed\n        ? arraySet.add(state.opponentNames, agentName)\n        : arraySet.remove(state.opponentNames, agentName),\n    };\n    this.setState(newState);\n  }\n\n  onStartTrainingClick(): void {\n    const state = this.expectState(StateType.TrainingAgentSelection);\n    {\n      const newState: TrainingState = {\n        stateType: StateType.Training,\n\n        agents: state.agents,\n        options: state.options,\n\n        cyclesCompleted: 0,\n        traineeName: state.selectedAgentName,\n        opponentNames: state.opponentNames,\n        relativeRewardLists: [],\n        hasTrainingBeenTerminated: false,\n\n        terminateTraining: noOp,\n      };\n      this.setState(newState, () => this.startTraining(state));\n    }\n  }\n\n  startTraining(preTrainingState: TrainingAgentSelectionState): void {\n    const trainee = getNamedAgent(\n      preTrainingState.agents,\n      preTrainingState.selectedAgentName\n    );\n    const opponents = preTrainingState.opponentNames.map((opponentName) =>\n      getNamedAgent(preTrainingState.agents, opponentName)\n    );\n    const { options } = preTrainingState;\n    trainAsync(\n      trainee,\n      opponents,\n      options.trainingCycles,\n      options.trainingCycleOptions,\n      options.useMainThreadForExpensiveComputation,\n      (\n        cycleNumber: number,\n        updatedTrainee: NamedAgent,\n        relativeRewards: RelativeReward[],\n        terminateTraining: () => void\n      ): void => {\n        const currentState = this.state;\n\n        if (\n          !(\n            currentState.stateType === StateType.Training &&\n            currentState.traineeName === trainee.name &&\n            arraySet.isEqual(\n              currentState.opponentNames,\n              preTrainingState.opponentNames\n            )\n          )\n        ) {\n          terminateTraining();\n          return;\n        }\n\n        this.setState((prevState) => {\n          if (\n            !(\n              prevState.stateType === StateType.Training &&\n              prevState.traineeName === trainee.name &&\n              arraySet.isEqual(\n                prevState.opponentNames,\n                preTrainingState.opponentNames\n              )\n            )\n          ) {\n            terminateTraining();\n            return prevState;\n          }\n\n          let newAgent: NamedAgent;\n          if (cycleNumber >= prevState.cyclesCompleted) {\n            newAgent = updatedTrainee;\n            agentsSaver.updateAgent(newAgent);\n          } else {\n            newAgent = prevState.agents.find(\n              (agent) => agent.name === trainee.name\n            )!;\n          }\n\n          const newState: TrainingState = {\n            ...prevState,\n            agents: prevState.agents.map((prevAgent) =>\n              prevAgent.name === updatedTrainee.name ? newAgent : prevAgent\n            ),\n            cyclesCompleted: cycleNumber + 1,\n            relativeRewardLists: immutSetElement(\n              prevState.relativeRewardLists,\n              cycleNumber,\n              relativeRewards\n            ),\n            terminateTraining,\n          };\n          return newState;\n        });\n      }\n    );\n  }\n\n  onTerminateTrainingClick(): void {\n    const state = this.expectState(StateType.Training);\n\n    state.terminateTraining();\n\n    const newState: TrainingState = {\n      ...state,\n      hasTrainingBeenTerminated: true,\n      terminateTraining: noOp,\n    };\n    this.setState(newState);\n  }\n\n  onCancelAgentDeletionClick(): void {\n    const state = this.expectState(StateType.AgentDeletion);\n    const newState: AgentDeletionState = {\n      ...state,\n      isConfirmingDeletion: false,\n    };\n    this.setState(newState);\n  }\n\n  onConfirmAgentDeletionClick(): void {\n    const state = this.expectState(StateType.AgentDeletion);\n\n    agentsSaver.removeAgent(state.selectedAgentName);\n\n    const newState: AgentListState = {\n      stateType: StateType.AgentList,\n\n      agents: state.agents.filter(\n        ({ name }) => name !== state.selectedAgentName\n      ),\n      options: state.options,\n    };\n    this.setState(newState);\n  }\n\n  onNameOfAgentToBeDeletedChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ): void {\n    const state = this.expectState(StateType.AgentDeletion);\n    const newState: AgentDeletionState = {\n      ...state,\n      selectedAgentName: event.target.value,\n    };\n    this.setState(newState);\n  }\n\n  onSelectAgentForDeletionClick(): void {\n    const state = this.expectState(StateType.AgentDeletion);\n    const newState: AgentDeletionState = {\n      ...state,\n      isConfirmingDeletion: true,\n    };\n    this.setState(newState);\n  }\n\n  onOpponentNameChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const state = this.expectState(StateType.Play);\n    const newOpponentName = event.target.value;\n\n    if (state.opponentName === newOpponentName) {\n      return;\n    }\n\n    const opponent = getAgent(state.agents, newOpponentName);\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n\n    const newState: PlayState = {\n      stateType: StateType.Play,\n\n      agents: state.agents,\n      options: state.options,\n\n      opponentName: newOpponentName,\n      reward: 0,\n      hands: 0,\n      betState: getRandomBetState(opponent, ante),\n      acknowledgeable: undefined,\n    };\n    this.setState(newState);\n  }\n\n  onBetInputValueChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const state = this.expectState(StateType.Play);\n\n    if (state.betState.betStateType === BetStateType.Max) {\n      throw new Error(\n        \"Impossible: state.betState.betInputValue does not exist on MaxBetState, and therefore cannot be changed.\"\n      );\n    }\n\n    const newState: PlayState = {\n      ...state,\n      betState: { ...state.betState, betInputValue: event.target.value },\n    };\n    this.setState(newState);\n  }\n\n  onPlaceBetClick(): void {\n    const state = this.expectState(StateType.Play);\n    const { betState } = state;\n\n    switch (betState.betStateType) {\n      case BetStateType.Initial:\n        this.placeInitialBet(state, betState);\n        break;\n\n      case BetStateType.Following:\n        this.placeFollowingBet(state, betState);\n        break;\n\n      case BetStateType.Max:\n        this.callFollowingBet(state, betState);\n        break;\n    }\n  }\n\n  placeInitialBet(state: PlayState, betState: InitialBetState): void {\n    const opponent = getAgent(state.agents, state.opponentName);\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n\n    const initialBet = +betState.betInputValue;\n    const { opponentStrength } = betState;\n    const followingBet = Math.max(\n      ante,\n      opponent.follow(opponentStrength, initialBet, Math.random())\n    );\n    if (followingBet > initialBet) {\n      const maxBetState: MaxBetState = {\n        betStateType: BetStateType.Max,\n\n        strength: betState.strength,\n        opponentStrength,\n        initialBet,\n        followingBet,\n      };\n      const newState: PlayState = {\n        ...state,\n        betState: maxBetState,\n      };\n      this.setState(newState);\n    } else if (followingBet < initialBet) {\n      const newState: PlayState = {\n        ...state,\n        betState: getRandomBetState(opponent, ante),\n        reward: state.reward + ante,\n        hands: state.hands + 1,\n        acknowledgeable: {\n          acknowledgeableType: GameAcknowledgeableType.Fold,\n          reward: ante,\n        },\n      };\n      this.setState(newState);\n    } else {\n      this.showdown(state, betState, initialBet);\n    }\n  }\n\n  showdown(state: PlayState, betState: BetState, usedBet: number): void {\n    const opponent = getAgent(state.agents, state.opponentName);\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n    const { strength: userStrength, opponentStrength } = betState;\n\n    if (userStrength > opponentStrength) {\n      const newState: PlayState = {\n        ...state,\n        betState: getRandomBetState(opponent, ante),\n        reward: state.reward + usedBet,\n        hands: state.hands + 1,\n        acknowledgeable: {\n          acknowledgeableType: GameAcknowledgeableType.Showdown,\n          strength: userStrength,\n          opponentStrength,\n          reward: usedBet,\n        },\n      };\n      this.setState(newState);\n    } else if (userStrength < opponentStrength) {\n      const newState: PlayState = {\n        ...state,\n        betState: getRandomBetState(opponent, ante),\n        reward: state.reward - usedBet,\n        hands: state.hands + 1,\n        acknowledgeable: {\n          acknowledgeableType: GameAcknowledgeableType.Showdown,\n          strength: userStrength,\n          opponentStrength,\n          reward: -usedBet,\n        },\n      };\n      this.setState(newState);\n    } else {\n      const newState: PlayState = {\n        ...state,\n        betState: getRandomBetState(opponent, ante),\n        reward: state.reward,\n        hands: state.hands + 1,\n        acknowledgeable: {\n          acknowledgeableType: GameAcknowledgeableType.Showdown,\n          strength: userStrength,\n          opponentStrength,\n          reward: 0,\n        },\n      };\n      this.setState(newState);\n    }\n  }\n\n  placeFollowingBet(state: PlayState, betState: FollowingBetState): void {\n    const followingBet = +betState.betInputValue;\n\n    if (followingBet < betState.opponentInitialBet) {\n      const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n      this.fold(state, ante);\n      return;\n    }\n\n    const { opponentMaxBet } = betState;\n    const opponent = getAgent(state.agents, state.opponentName);\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n    if (followingBet > opponentMaxBet) {\n      const newState: PlayState = {\n        ...state,\n        betState: getRandomBetState(opponent, ante),\n        hands: state.hands + 1,\n        reward: state.reward + ante,\n        acknowledgeable: {\n          acknowledgeableType: GameAcknowledgeableType.Fold,\n          reward: ante,\n        },\n      };\n      this.setState(newState);\n    } else {\n      this.showdown(state, betState, followingBet);\n    }\n  }\n\n  callFollowingBet(state: PlayState, betState: MaxBetState): void {\n    this.showdown(state, betState, betState.followingBet);\n  }\n\n  onFoldClick(): void {\n    const state = this.expectState(StateType.Play);\n    const { betState } = state;\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n    switch (betState.betStateType) {\n      case BetStateType.Initial:\n        throw new Error(\"Impossible: Cannot fold during InitialBetState\");\n      case BetStateType.Following:\n        this.fold(state, ante);\n        break;\n      case BetStateType.Max:\n        this.fold(state, betState.initialBet);\n        break;\n    }\n  }\n\n  fold(state: PlayState, forfeitedBet: number): void {\n    const opponent = getAgent(state.agents, state.opponentName);\n    const { ante } = state.options.trainingCycleOptions.evaluationOptions;\n\n    const newState: PlayState = {\n      ...state,\n\n      hands: state.hands + 1,\n      reward: state.reward - forfeitedBet,\n      betState: getRandomBetState(opponent, ante),\n      acknowledgeable: {\n        acknowledgeableType: GameAcknowledgeableType.Fold,\n        reward: -forfeitedBet,\n      },\n    };\n    this.setState(newState);\n  }\n\n  onAcknowledgeClick(): void {\n    const state = this.expectState(StateType.Play);\n    const newState: PlayState = { ...state, acknowledgeable: undefined };\n    this.setState(newState);\n  }\n\n  onGraphedAgentNameChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const state = this.expectState(StateType.Graph);\n    const newState: GraphState = {\n      ...state,\n      graphedAgentName: event.target.value,\n      graph: { ...state.graph, inspectedPoint: undefined },\n    };\n    this.setState(newState);\n  }\n\n  onGraphTypeChange(event: React.ChangeEvent<HTMLSelectElement>): void {\n    const state = this.expectState(StateType.Graph);\n    const policyGraphType: PolicyGraphType = +event.target.value;\n    const newState: GraphState = {\n      ...state,\n      graph: {\n        policyGraphType,\n\n        noise: state.graph.noise,\n        inspectedPoint: undefined,\n      },\n    };\n    this.setState(newState);\n  }\n\n  onGraphNoiseChange(event: React.ChangeEvent<HTMLInputElement>): void {\n    const noiseInputValue = event.target.value;\n    const isNoiseValid = isOnInclusiveUnitInterval(+noiseInputValue);\n\n    const state = this.expectState(StateType.Graph);\n    const newState: GraphState = {\n      ...state,\n      noiseInputValue,\n      graph: {\n        ...state.graph,\n        noise: isNoiseValid ? +noiseInputValue : state.graph.noise,\n      },\n    };\n    this.setState(newState);\n  }\n}\n\nfunction getInitialState(): AppState {\n  const agents = agentsSaver.getSavedAgents() ?? [];\n  const options = getSavedAppOptions() ?? getDefaultAppOptions();\n  return {\n    stateType: StateType.AgentList,\n\n    agents,\n    options,\n  };\n}\n\nfunction getDefaultAppOptions(): AppOptions {\n  return {\n    version: APP_OPTIONS_VERSION,\n    trainingCycles: 30,\n    trainingCycleOptions: {\n      derivativeStep: 0.001,\n      learningRate: 0.1,\n      evaluationOptions: {\n        hands: 1000,\n        ante: 0.001,\n      },\n    },\n    useMainThreadForExpensiveComputation: false,\n  };\n}\n\nfunction getSortedAgents(state: AppState): NamedAgent[] {\n  return state.agents\n    .slice()\n    .sort((a, b) => compareLexicographically(a.name, b.name));\n}\n\n/**\n * Using a lexicographical order on character codes,\n * returns a negative number if `a < b`, a positive\n * number if `a > b`, and `0` if `a === b`.\n */\nfunction compareLexicographically(a: string, b: string): number {\n  let i = 0;\n  while (true) {\n    if (i >= a.length) {\n      if (i >= b.length) {\n        return 0;\n      } else {\n        return -1;\n      }\n    }\n\n    if (i >= b.length) {\n      return 1;\n    }\n\n    const ca = a.charCodeAt(i);\n    const cb = b.charCodeAt(i);\n    const diff = ca - cb;\n    if (diff !== 0) {\n      return diff;\n    }\n\n    i++;\n  }\n}\n\nfunction getInputValuesForAppOptions(\n  options: AppOptions\n): AppOptionInputValues {\n  return {\n    trainingCycles: \"\" + options.trainingCycles,\n    trainingCycleOptions: {\n      derivativeStep: \"\" + options.trainingCycleOptions.derivativeStep,\n      learningRate: \"\" + options.trainingCycleOptions.learningRate,\n      evaluationOptions: {\n        hands: \"\" + options.trainingCycleOptions.evaluationOptions.hands,\n        ante: \"\" + options.trainingCycleOptions.evaluationOptions.ante,\n      },\n    },\n  };\n}\n\nfunction getUnusedAgentName(names: readonly string[]): string {\n  const ideas = [\n    \"Ant\",\n    \"Alligator\",\n    \"Aardvark\",\n    \"Bison\",\n    \"Boar\",\n    \"Boa\",\n    \"Cougar\",\n    \"Crane\",\n    \"Crab\",\n    \"Duck\",\n    \"Dog\",\n    \"Deer\",\n    \"Egret\",\n    \"Elephant\",\n    \"Elk\",\n    \"Flamingo\",\n    \"Fox\",\n    \"Frog\",\n  ];\n  shuffle(ideas);\n\n  for (const idea of ideas) {\n    if (!names.includes(idea)) {\n      return idea;\n    }\n  }\n\n  let i = 2;\n  while (true) {\n    for (const idea of ideas) {\n      const numbered = idea + i;\n      if (!names.includes(numbered)) {\n        return numbered;\n      }\n    }\n    i++;\n  }\n}\n\nfunction withPropertyValuesStringified<T>(obj: T): WithStringValues<T> {\n  const out = {} as WithStringValues<T>;\n  for (const key in obj) {\n    out[key] = \"\" + obj[key];\n  }\n  return out;\n}\n\nfunction withPropertyValuesParsedAsNumbers<T>(obj: T): WithNumberValues<T> {\n  const out = {} as WithNumberValues<T>;\n  for (const key in obj) {\n    out[key] = +obj[key];\n  }\n  return out;\n}\n\nfunction getNamedAgent(agents: NamedAgent[], expectedName: string): NamedAgent {\n  const agent = getAgent(agents, expectedName);\n  return { name: expectedName, agent };\n}\n\nfunction getRelativeReward(\n  rewards: RelativeReward[],\n  expectedName: string\n): number {\n  for (const { opponentName, reward } of rewards) {\n    if (opponentName === expectedName) {\n      return reward;\n    }\n  }\n\n  throw new Error(\n    \"Cannot find reward against agent named \" +\n      JSON.stringify(expectedName) +\n      \". The only relative rewards provided were: \" +\n      JSON.stringify(rewards)\n  );\n}\n\nfunction immutSetElement<T>(src: readonly T[], index: number, item: T): T[] {\n  const clone = src.slice();\n  clone[index] = item;\n  return clone;\n}\n\nfunction getRandomBetState(opponent: Agent, ante: number): BetState {\n  if (Math.random() > 0.5) {\n    return getRandomInitialBetState(ante);\n  } else {\n    return getRandomFollowingBetState(opponent, ante);\n  }\n}\n\nfunction getRandomInitialBetState(ante: number): InitialBetState {\n  return {\n    betStateType: BetStateType.Initial,\n    strength: Math.random(),\n    opponentStrength: Math.random(),\n    betInputValue: Math.max(ante, DEFAULT_BET).toFixed(DISPLAYED_DECIMALS),\n  };\n}\n\nfunction getRandomFollowingBetState(\n  opponent: Agent,\n  ante: number\n): FollowingBetState {\n  const opponentStrength = Math.random();\n  const opponentBets = opponent.lead(opponentStrength, Math.random());\n  const opponentInitialBet = Math.max(ante, opponentBets[0]);\n  const opponentMaxBet = Math.max(opponentInitialBet, opponentBets[1]);\n  return {\n    betStateType: BetStateType.Following,\n    strength: Math.random(),\n    opponentStrength,\n    opponentInitialBet,\n    opponentMaxBet,\n    betInputValue: Math.max(opponentInitialBet, DEFAULT_BET).toFixed(\n      DISPLAYED_DECIMALS\n    ),\n  };\n}\n\nfunction noOp(): void {}\n","import { deserializeAgent } from \"../agents\";\nimport { NamedAgent } from \"../types/state\";\nimport { decodeBytes, encodeBytes } from \"./byteStringifier\";\nimport { LocalStorageKeys } from \"./utils\";\nimport * as arraySet from \"../arraySet\";\n\nexport function getSavedAgents(): undefined | NamedAgent[] {\n  const agentNamesStr = localStorage.getItem(LocalStorageKeys.AgentNames);\n  if (agentNamesStr === null) {\n    return;\n  }\n  const agentNames: string[] = JSON.parse(agentNamesStr);\n  return agentNames.map(\n    (agentName): NamedAgent => {\n      const agentStr = localStorage.getItem(\n        LocalStorageKeys.AgentPrefix + agentName\n      );\n      if (agentStr === null) {\n        throw new Error();\n      }\n      const agent = deserializeAgent(decodeBytes(agentStr));\n      return { name: agentName, agent };\n    }\n  );\n}\n\nexport function updateAgent({ name: agentName, agent }: NamedAgent): void {\n  const agentStr = encodeBytes(new Uint8Array(agent.toArrayBuffer()));\n  localStorage.setItem(LocalStorageKeys.AgentPrefix + agentName, agentStr);\n}\n\nexport function addAgent({ name: agentName, agent }: NamedAgent): void {\n  const currentAgentNamesStr = localStorage.getItem(\n    LocalStorageKeys.AgentNames\n  );\n  const currentAgentNames: string[] =\n    currentAgentNamesStr === null ? [] : JSON.parse(currentAgentNamesStr);\n  const newAgentNames = arraySet.add(currentAgentNames, agentName);\n  const newAgentNamesStr = JSON.stringify(newAgentNames);\n  localStorage.setItem(LocalStorageKeys.AgentNames, newAgentNamesStr);\n\n  const agentStr = encodeBytes(new Uint8Array(agent.toArrayBuffer()));\n  localStorage.setItem(LocalStorageKeys.AgentPrefix + agentName, agentStr);\n}\n\nexport function removeAgent(agentName: string): void {\n  const currentAgentNamesStr = localStorage.getItem(\n    LocalStorageKeys.AgentNames\n  );\n  const currentAgentNames: string[] =\n    currentAgentNamesStr === null ? [] : JSON.parse(currentAgentNamesStr);\n  const newAgentNames = arraySet.remove(currentAgentNames, agentName);\n  const newAgentNamesStr = JSON.stringify(newAgentNames);\n  localStorage.setItem(LocalStorageKeys.AgentNames, newAgentNamesStr);\n\n  localStorage.removeItem(LocalStorageKeys.AgentPrefix + agentName);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { makeUtilsAccessibleForDebug } from \"./debugUtils/makeUtilsAccessibleForDebug\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nmakeUtilsAccessibleForDebug();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { deserializeAgent } from \"../agents\";\nimport { evaluate } from \"../game/evaluate\";\nimport { decodeBytes, encodeBytes } from \"../stateSavers/byteStringifier\";\n\nexport function makeUtilsAccessibleForDebug(): void {\n  (window as any).encodeBytes = encodeBytes;\n  (window as any).decodeBytes = decodeBytes;\n  (window as any).deserializeAgent = deserializeAgent;\n\n  (window as any).evaluate = evaluate;\n}\n"],"sourceRoot":""}