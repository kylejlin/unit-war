{"version":3,"sources":["../webpack/bootstrap","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","game/evaluate.ts","random.ts","agents/artichoke.ts","splitRandomVariable.ts","agents/broccoli.ts","agents/carrot.ts","agents/daikon.ts","agents/eggplant.ts","agents/fig.ts","agents/grape.ts","agents/habanero.ts","agents/index.ts","offloaders/workers/trainingWorker/types.ts","offloaders/workers/trainingWorker/trainingWorker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","_createClass","protoProps","staticProps","evaluate","a","b","options","aTotal","bTotal","hands","ante","Math","random","aReward","getLeaderReward","bReward","leader","follower","leaderStrength","leaderNoise","leaderOutput","lead","initialBet","max","maxBet","followerStrength","followerNoise","followingBet","follow","normalRandom","mean","variance","u1","u2","z1","sqrt","log","cos","PI","AgentArtichoke","leaderNetwork","followerNetwork","agentType","inputs","this","AgentType","Artichoke","Float64Array","strength","noise","opponent","train","leaderFloats","toArrayBuffer","followerFloats","out","set","buffer","fromHiddenLayerSize","hiddenLayerSize","hiddenSize","Network","fromLayerSizes","floats","leaderSize","followerSize","fromArrayBuffer","slice","inputSize","outputSize","hiddenWeights","hiddenBiases","hiddenActivations","outputWeights","outputBiases","outputActivations","updatedHiddenWeights","updatedHiddenBiases","updatedOutputWeights","updatedOutputBiases","hiddenWeightsSize","hiddenBiasesSize","hiddenActivationsSize","outputWeightsSize","outputBiasesSize","outputActivationsSize","ArrayBuffer","BYTES_PER_ELEMENT","initializeWeights","subarray","network","input","hiddenIndex","dot","inputIndex","outputIndex","sigmoid","containingAgent","evaluationOptions","baseline","derivativeStep","learningRate","numberOfHiddenWeights","originalWeight","derivative","numberOfHiddenBiases","originalBias","numberOfOutputWeights","numberOfOutputBiases","weights","exp","splitRandomVariable","u32","Uint32Array","u16","Uint16Array","Error","isBigEndian","splitterIn","_2_POW_32","splitterOut","_2_POW_16","AgentBroccoli","leadOutput","Broccoli","_buffer","_strength","_initialBet","AgentCarrot","Carrot","AgentDaikon","bet","Daikon","AgentEggplant","Eggplant","AgentFig","Fig","trainWithoutUpdating","update","AgentGrape","Grape","AgentHabanero","Habanero","TrainingWorkerMessageType","ALL_AGENT_TYPES","deserializeAgent","includes","deserializeAgentOfType","onCycleComplete","cycleNumber","trainee","relativeRewards","traineeBuffer","agent","namedTraineeBuffer","agentName","message","messageType","CycleComplete","self","postMessage","addEventListener","event","data","Start","namedTrainee","namedOpponents","namedOpponentBuffers","map","trainingCycles","trainingCycleOptions","opponents","opponentNames","opponentCount","opponentIndex","strongestOpponentIndex","lowestRelativeReward","reward","strongestOpponent","Array","opponentName","Done","onDoneTraining","startTraining","decodeDataAndStartTraining"],"mappings":"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","file":"a5362495639223b05104.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { Agent, EvaluationOptions } from \"./types\";\n\nexport function evaluate(\n  a: Agent,\n  b: Agent,\n  options: EvaluationOptions\n): number {\n  let aTotal = 0;\n  let bTotal = 0;\n\n  const { hands, ante } = options;\n  for (let i = 0; i < hands; i++) {\n    if (Math.random() > 0.5) {\n      const aReward = getLeaderReward(a, b, ante);\n      aTotal += aReward;\n      bTotal -= aReward;\n    } else {\n      const bReward = getLeaderReward(b, a, ante);\n      bTotal += bReward;\n      aTotal -= bReward;\n    }\n  }\n\n  return (aTotal - bTotal) / 2;\n}\n\nfunction getLeaderReward(leader: Agent, follower: Agent, ante: number): number {\n  const leaderStrength = Math.random();\n  const leaderNoise = Math.random();\n  const leaderOutput = leader.lead(leaderStrength, leaderNoise);\n  const initialBet = Math.max(ante, leaderOutput[0]);\n  const maxBet = Math.max(initialBet, leaderOutput[1]);\n\n  const followerStrength = Math.random();\n  const followerNoise = Math.random();\n  const followingBet = Math.max(\n    ante,\n    follower.follow(followerStrength, initialBet, followerNoise)\n  );\n\n  if (followingBet < initialBet) {\n    return ante;\n  }\n\n  if (followingBet > maxBet) {\n    return -initialBet;\n  }\n\n  if (leaderStrength > followerStrength) {\n    return followingBet;\n  }\n  if (leaderStrength < followerStrength) {\n    return -followingBet;\n  }\n  return 0;\n}\n","/** https://en.wikipedia.org/wiki/Box-Muller_transform */\nexport function normalRandom(mean: number = 0, variance: number = 1): number {\n  let u1 = 0;\n  let u2 = 0;\n\n  // Convert [0,1) to (0,1)\n  while (u1 === 0) {\n    u1 = Math.random();\n  }\n  while (u2 === 0) {\n    u2 = Math.random();\n  }\n\n  const z1 = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  return variance * z1 + mean;\n}\n\nexport function shuffle(arr: unknown[]): void {\n  for (let i = arr.length - 1; i >= 1; i--) {\n    let j = randIntFromZeroToN(i + 1);\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  }\n}\n\nfunction randIntFromZeroToN(exclMax: number): number {\n  return Math.floor(Math.random() * exclMax);\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface ArtichokeCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areArtichokeCreationOptionsValid(\n  options: ArtichokeCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentArtichoke implements Agent {\n  readonly agentType: AgentType.Artichoke;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Artichoke;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: ArtichokeCreationOptions): Agent {\n    return AgentArtichoke.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentArtichoke(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentArtichoke(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = noise;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = initialBet;\n    inputs[2] = noise;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    this.leaderNetwork.train(this, opponent, options);\n    this.followerNetwork.train(this, opponent, options);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  train(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","/**\n * Transforms a uniformly distributed\n * random variable on `[0, 1)` into two uniformly\n * distributed random variables (also on `[0, 1)`).\n *\n * The two output variables are written into the provided\n * `Float64Array`.\n */\nexport const splitRandomVariable: (\n  random: number,\n  out: Float64Array\n) => void = isBigEndian() ? splitBigEndian : splitLittleEndian;\n\nfunction isBigEndian(): boolean {\n  const u32 = new Uint32Array([0xaabb_ccdd]);\n  const u16 = new Uint16Array(u32.buffer);\n  if (u16[0] === 0xaabb && u16[1] === 0xccdd) {\n    return true;\n  } else if (u16[1] === 0xaabb && u16[0] === 0xccdd) {\n    return false;\n  } else {\n    throw new Error(\"Could not detect endianness.\");\n  }\n}\n\nconst _2_POW_32 = 2 ** 32;\nconst _2_POW_16 = 2 ** 16;\n\nconst splitterIn = new Uint32Array(1);\nconst splitterOut = new Uint16Array(splitterIn.buffer);\n\nfunction splitBigEndian(random: number, out: Float64Array): void {\n  splitterIn[0] = random * _2_POW_32;\n  out[0] = splitterOut[0] / _2_POW_16;\n  out[1] = splitterOut[1] / _2_POW_16;\n}\n\nfunction splitLittleEndian(random: number, out: Float64Array): void {\n  splitterIn[0] = random * _2_POW_32;\n  out[0] = splitterOut[1] / _2_POW_16;\n  out[1] = splitterOut[0] / _2_POW_16;\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\nimport { splitRandomVariable } from \"../splitRandomVariable\";\n\nexport interface BroccoliCreationOptions {}\n\nexport function areBroccoliOptionsValid(\n  _options: BroccoliCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentBroccoli implements Agent {\n  readonly agentType: AgentType.Broccoli;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: BroccoliCreationOptions): Agent {\n    return new AgentBroccoli();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentBroccoli();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Broccoli;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(_strength: number, noise: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    splitRandomVariable(noise, leadOutput);\n    return leadOutput;\n  }\n\n  follow(_strength: number, _initialBet: number, noise: number): number {\n    return noise;\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Broccoli]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface CarrotCreationOptions {}\n\nexport function areCarrotOptionsValid(\n  _options: CarrotCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentCarrot implements Agent {\n  readonly agentType: AgentType.Carrot;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: CarrotCreationOptions): Agent {\n    return new AgentCarrot();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentCarrot();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Carrot;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(strength: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    leadOutput[0] = strength;\n    leadOutput[1] = strength;\n    return leadOutput;\n  }\n\n  follow(strength: number): number {\n    return strength;\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Carrot]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface DaikonCreationOptions {\n  bet: number;\n}\n\nexport function areDaikonOptionsValid(options: DaikonCreationOptions): boolean {\n  const { bet } = options;\n  return 0 <= bet && bet <= 1;\n}\n\nexport class AgentDaikon implements Agent {\n  readonly agentType: AgentType.Daikon;\n\n  private readonly leadOutput: ReadonlyFloat64Array;\n\n  private constructor(bet: number) {\n    this.agentType = AgentType.Daikon;\n\n    this.leadOutput = new Float64Array([bet, bet]);\n  }\n\n  static fromCreationOptions(options: DaikonCreationOptions): Agent {\n    return new AgentDaikon(options.bet);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const bet = new Float64Array(buffer)[1];\n    return new AgentDaikon(bet);\n  }\n\n  lead(): ReadonlyFloat64Array {\n    return this.leadOutput;\n  }\n\n  follow(): number {\n    return this.leadOutput[0];\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    const bet = this.leadOutput[0];\n    return new Float64Array([AgentType.Daikon, bet]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { Agent } from \"../game/types\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface EggplantCreationOptions {}\n\nexport function areEggplantOptionsValid(\n  _options: EggplantCreationOptions\n): boolean {\n  return true;\n}\n\nexport class AgentEggplant implements Agent {\n  readonly agentType: AgentType.Eggplant;\n\n  private readonly leadOutput: Float64Array;\n\n  static fromCreationOptions(options: EggplantCreationOptions): Agent {\n    return new AgentEggplant();\n  }\n\n  static fromArrayBuffer(_buffer: ArrayBuffer): Agent {\n    return new AgentEggplant();\n  }\n\n  private constructor() {\n    this.agentType = AgentType.Eggplant;\n\n    this.leadOutput = new Float64Array(2);\n  }\n\n  lead(strength: number): ReadonlyFloat64Array {\n    const { leadOutput } = this;\n    leadOutput[0] = strength;\n    leadOutput[1] = strength > 0.5 ? 1 : 0;\n    return leadOutput;\n  }\n\n  follow(strength: number, initialBet: number): number {\n    if (strength > 0.5) {\n      return Math.max(strength, initialBet);\n    } else {\n      return strength;\n    }\n  }\n\n  train(): void {}\n\n  toArrayBuffer(): ArrayBuffer {\n    return new Float64Array([AgentType.Eggplant]).buffer;\n  }\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface FigCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areFigCreationOptionsValid(\n  options: FigCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentFig implements Agent {\n  readonly agentType: AgentType.Fig;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Fig;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: FigCreationOptions): Agent {\n    return AgentFig.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentFig(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentFig(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = noise;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength;\n    inputs[1] = initialBet;\n    inputs[2] = noise;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface GrapeCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areGrapeCreationOptionsValid(\n  options: GrapeCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentGrape implements Agent {\n  readonly agentType: AgentType.Grape;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Grape;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: GrapeCreationOptions): Agent {\n    return AgentGrape.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentGrape(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentGrape(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = noise * 2 - 1;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = initialBet * 2 - 1;\n    inputs[2] = noise * 2 - 1;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = relu(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction relu(n: number): number {\n  return Math.max(0, n);\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { AgentType } from \".\";\nimport { evaluate } from \"../game/evaluate\";\nimport { Agent, TrainingCycleOptions } from \"../game/types\";\nimport { isPositiveInteger } from \"../numberValidation\";\nimport { normalRandom } from \"../random\";\nimport { ReadonlyFloat64Array } from \"../readonly/readonlyFloat64Array\";\n\nexport interface HabaneroCreationOptions {\n  hiddenLayerSize: number;\n}\n\nexport function areHabaneroCreationOptionsValid(\n  options: HabaneroCreationOptions\n): boolean {\n  return isPositiveInteger(options.hiddenLayerSize);\n}\n\nexport class AgentHabanero implements Agent {\n  readonly agentType: AgentType.Habanero;\n\n  private readonly inputs: Float64Array;\n\n  private constructor(\n    private readonly leaderNetwork: Network,\n    private readonly followerNetwork: Network\n  ) {\n    this.agentType = AgentType.Habanero;\n    this.inputs = new Float64Array(3);\n  }\n\n  static fromCreationOptions(options: HabaneroCreationOptions): Agent {\n    return AgentHabanero.fromHiddenLayerSize(options.hiddenLayerSize);\n  }\n\n  static fromHiddenLayerSize(hiddenSize: number): Agent {\n    const leaderNetwork = Network.fromLayerSizes(2, hiddenSize, 2);\n    const followerNetwork = Network.fromLayerSizes(3, hiddenSize, 1);\n    return new AgentHabanero(leaderNetwork, followerNetwork);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Agent {\n    const floats = new Float64Array(buffer);\n    const leaderSize = floats[1];\n    const followerSize = floats[2];\n    const leaderNetwork = Network.fromArrayBuffer(\n      floats.slice(3, 3 + leaderSize).buffer\n    );\n    const followerNetwork = Network.fromArrayBuffer(\n      floats.slice(3 + leaderSize, 3 + leaderSize + followerSize).buffer\n    );\n    return new AgentHabanero(leaderNetwork, followerNetwork);\n  }\n\n  lead(strength: number, noise: number): ReadonlyFloat64Array {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = noise * 2 - 1;\n    return this.leaderNetwork.evaluate(inputs);\n  }\n\n  follow(strength: number, initialBet: number, noise: number): number {\n    const { inputs } = this;\n    inputs[0] = strength * 2 - 1;\n    inputs[1] = initialBet * 2 - 1;\n    inputs[2] = noise * 2 - 1;\n    return this.followerNetwork.evaluate(inputs)[0];\n  }\n\n  train(opponent: Agent, options: TrainingCycleOptions): void {\n    const { leaderNetwork, followerNetwork } = this;\n\n    leaderNetwork.trainWithoutUpdating(this, opponent, options);\n    followerNetwork.trainWithoutUpdating(this, opponent, options);\n\n    leaderNetwork.update();\n    followerNetwork.update();\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const leaderFloats = new Float64Array(this.leaderNetwork.toArrayBuffer());\n    const followerFloats = new Float64Array(\n      this.followerNetwork.toArrayBuffer()\n    );\n    const out = new Float64Array(\n      3 + leaderFloats.length + followerFloats.length\n    );\n\n    out[0] = this.agentType;\n    out[1] = leaderFloats.length;\n    out[2] = followerFloats.length;\n    out.set(leaderFloats, 3);\n    out.set(followerFloats, 3 + leaderFloats.length);\n\n    return out.buffer;\n  }\n}\n\nclass Network {\n  private readonly buffer: ArrayBuffer;\n\n  private readonly inputSize: number;\n  private readonly hiddenSize: number;\n  private readonly outputSize: number;\n\n  private readonly hiddenWeights: Float64Array;\n  private readonly hiddenBiases: Float64Array;\n  private readonly hiddenActivations: Float64Array;\n\n  private readonly outputWeights: Float64Array;\n  private readonly outputBiases: Float64Array;\n  private readonly outputActivations: Float64Array;\n\n  private readonly updatedHiddenWeights: Float64Array;\n  private readonly updatedHiddenBiases: Float64Array;\n\n  private readonly updatedOutputWeights: Float64Array;\n  private readonly updatedOutputBiases: Float64Array;\n\n  static fromLayerSizes(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ): Network {\n    return new Network(inputSize, hiddenSize, outputSize);\n  }\n\n  static fromArrayBuffer(buffer: ArrayBuffer): Network {\n    const floats = new Float64Array(buffer);\n\n    const inputSize = floats[0];\n    const hiddenSize = floats[1];\n    const outputSize = floats[2];\n\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n\n    const hiddenWeights = floats.subarray(3, 3 + hiddenWeightsSize);\n    const hiddenBiases = floats.subarray(\n      3 + hiddenWeightsSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize\n    );\n\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n\n    const outputWeights = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize,\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize\n    );\n    const outputBiases = floats.subarray(\n      3 + hiddenWeightsSize + hiddenBiasesSize + outputWeightsSize,\n      3 +\n        hiddenWeightsSize +\n        hiddenBiasesSize +\n        outputWeightsSize +\n        outputBiasesSize\n    );\n\n    const network = new Network(inputSize, hiddenSize, outputSize);\n    network.hiddenWeights.set(hiddenWeights);\n    network.hiddenBiases.set(hiddenBiases);\n    network.outputWeights.set(outputWeights);\n    network.outputBiases.set(outputBiases);\n\n    return network;\n  }\n\n  private constructor(\n    inputSize: number,\n    hiddenSize: number,\n    outputSize: number\n  ) {\n    const hiddenWeightsSize = hiddenSize * inputSize;\n    const hiddenBiasesSize = hiddenSize;\n    const hiddenActivationsSize = hiddenSize;\n    const outputWeightsSize = outputSize * hiddenSize;\n    const outputBiasesSize = outputSize;\n    const outputActivationsSize = outputSize;\n    const buffer = new ArrayBuffer(\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize +\n          outputBiasesSize)\n    );\n    this.buffer = buffer;\n\n    this.inputSize = inputSize;\n    this.hiddenSize = hiddenSize;\n    this.outputSize = outputSize;\n\n    this.hiddenWeights = new Float64Array(buffer, 0, hiddenWeightsSize);\n    this.hiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * hiddenWeightsSize,\n      hiddenBiasesSize\n    );\n    this.hiddenActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT * (hiddenWeightsSize + hiddenBiasesSize),\n      hiddenActivationsSize\n    );\n\n    this.outputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize + hiddenBiasesSize + hiddenActivationsSize),\n      outputWeightsSize\n    );\n    this.outputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n    this.outputActivations = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize),\n      outputActivationsSize\n    );\n\n    this.updatedHiddenWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize),\n      hiddenWeightsSize\n    );\n    this.updatedHiddenBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize),\n      hiddenBiasesSize\n    );\n\n    this.updatedOutputWeights = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize),\n      outputWeightsSize\n    );\n    this.updatedOutputBiases = new Float64Array(\n      buffer,\n      Float64Array.BYTES_PER_ELEMENT *\n        (hiddenWeightsSize +\n          hiddenBiasesSize +\n          hiddenActivationsSize +\n          outputWeightsSize +\n          outputBiasesSize +\n          outputActivationsSize +\n          hiddenWeightsSize +\n          hiddenBiasesSize +\n          outputWeightsSize),\n      outputBiasesSize\n    );\n\n    this.initializeWeights();\n  }\n\n  private initializeWeights(): void {\n    initializeWeights(this.hiddenWeights, this.inputSize);\n    initializeWeights(this.outputWeights, this.hiddenSize);\n  }\n\n  evaluate(input: ReadonlyFloat64Array): ReadonlyFloat64Array {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n      hiddenActivations,\n\n      outputWeights,\n      outputBiases,\n      outputActivations,\n    } = this;\n\n    for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n      let dot = 0;\n\n      for (let inputIndex = 0; inputIndex < inputSize; inputIndex++) {\n        dot +=\n          hiddenWeights[hiddenIndex * inputSize + inputIndex] *\n          input[inputIndex];\n      }\n\n      hiddenActivations[hiddenIndex] = sigmoid(dot + hiddenBiases[hiddenIndex]);\n    }\n\n    for (let outputIndex = 0; outputIndex < outputSize; outputIndex++) {\n      let dot = 0;\n\n      for (let hiddenIndex = 0; hiddenIndex < hiddenSize; hiddenIndex++) {\n        dot +=\n          outputWeights[outputIndex * hiddenSize + hiddenIndex] *\n          hiddenActivations[hiddenIndex];\n      }\n\n      outputActivations[outputIndex] = sigmoid(dot + outputBiases[outputIndex]);\n    }\n\n    return outputActivations;\n  }\n\n  trainWithoutUpdating(\n    containingAgent: Agent,\n    opponent: Agent,\n    options: TrainingCycleOptions\n  ): void {\n    const { evaluationOptions } = options;\n    const baseline = evaluate(containingAgent, opponent, evaluationOptions);\n\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    const { derivativeStep, learningRate } = options;\n\n    const numberOfHiddenWeights = hiddenWeights.length;\n    for (let i = 0; i < numberOfHiddenWeights; i++) {\n      const originalWeight = hiddenWeights[i];\n      hiddenWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenWeights[i] = originalWeight + derivative * learningRate;\n      hiddenWeights[i] = originalWeight;\n    }\n\n    const numberOfHiddenBiases = hiddenBiases.length;\n    for (let i = 0; i < numberOfHiddenBiases; i++) {\n      const originalBias = hiddenBiases[i];\n      hiddenBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedHiddenBiases[i] = originalBias + derivative * learningRate;\n      hiddenBiases[i] = originalBias;\n    }\n\n    const numberOfOutputWeights = outputWeights.length;\n    for (let i = 0; i < numberOfOutputWeights; i++) {\n      const originalWeight = outputWeights[i];\n      outputWeights[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputWeights[i] = originalWeight + derivative * learningRate;\n      outputWeights[i] = originalWeight;\n    }\n\n    const numberOfOutputBiases = outputBiases.length;\n    for (let i = 0; i < numberOfOutputBiases; i++) {\n      const originalBias = outputBiases[i];\n      outputBiases[i] += derivativeStep;\n      const evaluation = evaluate(containingAgent, opponent, evaluationOptions);\n      const derivative = (evaluation - baseline) / derivativeStep;\n      updatedOutputBiases[i] = originalBias + derivative * learningRate;\n      outputBiases[i] = originalBias;\n    }\n  }\n\n  update(): void {\n    const {\n      hiddenWeights,\n      updatedHiddenWeights,\n      hiddenBiases,\n      updatedHiddenBiases,\n\n      outputWeights,\n      updatedOutputWeights,\n      outputBiases,\n      updatedOutputBiases,\n    } = this;\n\n    hiddenWeights.set(updatedHiddenWeights);\n    hiddenBiases.set(updatedHiddenBiases);\n    outputWeights.set(updatedOutputWeights);\n    outputBiases.set(updatedOutputBiases);\n  }\n\n  toArrayBuffer(): ArrayBuffer {\n    const {\n      inputSize,\n      hiddenSize,\n      outputSize,\n\n      hiddenWeights,\n      hiddenBiases,\n\n      outputWeights,\n      outputBiases,\n    } = this;\n\n    const floats = new Float64Array(\n      3 +\n        hiddenWeights.length +\n        hiddenBiases.length +\n        outputWeights.length +\n        outputBiases.length\n    );\n\n    floats[0] = inputSize;\n    floats[1] = hiddenSize;\n    floats[2] = outputSize;\n\n    floats.set(hiddenWeights, 3);\n    floats.set(hiddenBiases, 3 + hiddenWeights.length);\n\n    floats.set(outputWeights, 3 + hiddenWeights.length + hiddenBiases.length);\n    floats.set(\n      outputBiases,\n      3 + hiddenWeights.length + hiddenBiases.length + outputWeights.length\n    );\n\n    return floats.buffer;\n  }\n}\n\nfunction initializeWeights(weights: Float64Array, inputSize: number): void {\n  for (let i = 0; i < weights.length; i++) {\n    weights[i] = normalRandom(0, 1 / Math.sqrt(inputSize));\n  }\n}\n\nfunction sigmoid(n: number): number {\n  return 1 / (1 + Math.exp(-n));\n}\n","import { Agent } from \"../game/types\";\nimport {\n  AgentArtichoke,\n  areArtichokeCreationOptionsValid,\n  ArtichokeCreationOptions,\n} from \"./artichoke\";\nimport {\n  AgentBroccoli,\n  areBroccoliOptionsValid,\n  BroccoliCreationOptions,\n} from \"./broccoli\";\nimport {\n  AgentCarrot,\n  areCarrotOptionsValid,\n  CarrotCreationOptions,\n} from \"./carrot\";\nimport {\n  AgentDaikon,\n  areDaikonOptionsValid,\n  DaikonCreationOptions,\n} from \"./daikon\";\nimport {\n  AgentEggplant,\n  areEggplantOptionsValid,\n  EggplantCreationOptions,\n} from \"./eggplant\";\nimport {\n  AgentFig,\n  areFigCreationOptionsValid,\n  FigCreationOptions,\n} from \"./fig\";\nimport {\n  AgentGrape,\n  areGrapeCreationOptionsValid,\n  GrapeCreationOptions,\n} from \"./grape\";\nimport {\n  AgentHabanero,\n  areHabaneroCreationOptionsValid,\n  HabaneroCreationOptions,\n} from \"./habanero\";\n\nexport enum AgentType {\n  Artichoke = 1,\n  Broccoli = 2,\n  Carrot = 3,\n  Daikon = 4,\n  Eggplant = 5,\n  Fig = 6,\n  Grape = 7,\n  Habanero = 8,\n}\n\nexport type AgentCreationOptions =\n  | ArtichokeCreationOptions\n  | BroccoliCreationOptions\n  | CarrotCreationOptions\n  | DaikonCreationOptions\n  | EggplantCreationOptions\n  | FigCreationOptions\n  | GrapeCreationOptions\n  | HabaneroCreationOptions;\n\nexport const ALL_AGENT_TYPES: AgentType[] = [\n  AgentType.Artichoke,\n  AgentType.Broccoli,\n  AgentType.Carrot,\n  AgentType.Daikon,\n  AgentType.Eggplant,\n  AgentType.Fig,\n  AgentType.Grape,\n  AgentType.Habanero,\n];\n\nexport function deserializeAgent(buffer: ArrayBuffer): Agent {\n  const agentType = new Float64Array(buffer)[0];\n\n  if (isValidAgentType(agentType)) {\n    return deserializeAgentOfType(buffer, agentType);\n  } else {\n    throw new TypeError(\"Cannot recognize AgentType: \" + agentType);\n  }\n}\n\nfunction isValidAgentType(n: number): n is AgentType {\n  return ALL_AGENT_TYPES.includes(n);\n}\n\nfunction deserializeAgentOfType(\n  buffer: ArrayBuffer,\n  agentType: AgentType\n): Agent {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return AgentArtichoke.fromArrayBuffer(buffer);\n    case AgentType.Broccoli:\n      return AgentBroccoli.fromArrayBuffer(buffer);\n    case AgentType.Carrot:\n      return AgentCarrot.fromArrayBuffer(buffer);\n    case AgentType.Daikon:\n      return AgentDaikon.fromArrayBuffer(buffer);\n    case AgentType.Eggplant:\n      return AgentEggplant.fromArrayBuffer(buffer);\n    case AgentType.Fig:\n      return AgentFig.fromArrayBuffer(buffer);\n    case AgentType.Grape:\n      return AgentGrape.fromArrayBuffer(buffer);\n    case AgentType.Habanero:\n      return AgentHabanero.fromArrayBuffer(buffer);\n  }\n}\n\nexport function createAgent(\n  agentType: AgentType,\n  creationOptions: AgentCreationOptions\n): Agent {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return AgentArtichoke.fromCreationOptions(\n        creationOptions as ArtichokeCreationOptions\n      );\n    case AgentType.Broccoli:\n      return AgentBroccoli.fromCreationOptions(\n        creationOptions as BroccoliCreationOptions\n      );\n    case AgentType.Carrot:\n      return AgentCarrot.fromCreationOptions(\n        creationOptions as CarrotCreationOptions\n      );\n    case AgentType.Daikon:\n      return AgentDaikon.fromCreationOptions(\n        creationOptions as DaikonCreationOptions\n      );\n    case AgentType.Eggplant:\n      return AgentEggplant.fromCreationOptions(\n        creationOptions as EggplantCreationOptions\n      );\n    case AgentType.Fig:\n      return AgentFig.fromCreationOptions(\n        creationOptions as FigCreationOptions\n      );\n    case AgentType.Grape:\n      return AgentGrape.fromCreationOptions(\n        creationOptions as GrapeCreationOptions\n      );\n    case AgentType.Habanero:\n      return AgentHabanero.fromCreationOptions(\n        creationOptions as HabaneroCreationOptions\n      );\n  }\n}\n\nexport function getAgentTypeDisplayString(agentType: AgentType): string {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return \"Artichoke [Neural Network]\";\n    case AgentType.Broccoli:\n      return \"Broccoli [Random]\";\n    case AgentType.Carrot:\n      return \"Carrot [Value]\";\n    case AgentType.Daikon:\n      return \"Daikon [Constant]\";\n    case AgentType.Eggplant:\n      return \"Eggplant [Value]\";\n    case AgentType.Fig:\n      return \"Fig [Neural Network]\";\n    case AgentType.Grape:\n      return \"Grape [Neural Network]\";\n    case AgentType.Habanero:\n      return \"Habanero [Neural Network]\";\n  }\n}\n\nexport function getDefaultAgentCreationOptions(\n  agentType: AgentType\n): AgentCreationOptions {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Broccoli:\n      return {};\n    case AgentType.Carrot:\n      return {};\n    case AgentType.Daikon:\n      return { bet: 0.5 };\n    case AgentType.Eggplant:\n      return {};\n    case AgentType.Fig:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Grape:\n      return { hiddenLayerSize: 16 };\n    case AgentType.Habanero:\n      return { hiddenLayerSize: 16 };\n  }\n}\n\nexport function areAgentCreationOptionsValid(\n  agentType: AgentType,\n  options: AgentCreationOptions\n): boolean {\n  switch (agentType) {\n    case AgentType.Artichoke:\n      return areArtichokeCreationOptionsValid(\n        options as ArtichokeCreationOptions\n      );\n    case AgentType.Broccoli:\n      return areBroccoliOptionsValid(options as BroccoliCreationOptions);\n    case AgentType.Carrot:\n      return areCarrotOptionsValid(options as CarrotCreationOptions);\n    case AgentType.Daikon:\n      return areDaikonOptionsValid(options as DaikonCreationOptions);\n    case AgentType.Eggplant:\n      return areEggplantOptionsValid(options as EggplantCreationOptions);\n    case AgentType.Fig:\n      return areFigCreationOptionsValid(options as FigCreationOptions);\n    case AgentType.Grape:\n      return areGrapeCreationOptionsValid(options as GrapeCreationOptions);\n    case AgentType.Habanero:\n      return areHabaneroCreationOptionsValid(\n        options as HabaneroCreationOptions\n      );\n  }\n}\n\nexport function cloneAgent(agent: Agent): Agent {\n  return deserializeAgent(agent.toArrayBuffer());\n}\n","import { TrainingCycleOptions } from \"../../../game/types\";\nimport { RelativeReward } from \"../../../types/state\";\n\nexport enum TrainingWorkerMessageType {\n  Start,\n  CycleComplete,\n  Done,\n}\n\nexport interface StartRequest {\n  messageType: TrainingWorkerMessageType.Start;\n\n  namedTraineeBuffer: NamedAgentBuffer;\n  namedOpponentBuffers: NamedAgentBuffer[];\n  trainingCycles: number;\n  trainingCycleOptions: TrainingCycleOptions;\n}\n\nexport interface NamedAgentBuffer {\n  agentName: string;\n  buffer: ArrayBuffer;\n}\n\nexport type TrainingWorkerNotification =\n  | CycleCompleteNotification\n  | DoneNotification;\n\nexport interface CycleCompleteNotification {\n  messageType: TrainingWorkerMessageType.CycleComplete;\n\n  cycleNumber: number;\n  namedTraineeBuffer: NamedAgentBuffer;\n  relativeRewards: RelativeReward[];\n}\n\nexport interface DoneNotification {\n  messageType: TrainingWorkerMessageType.Done;\n}\n","import { deserializeAgent } from \"../../../agents\";\nimport { evaluate } from \"../../../game/evaluate\";\nimport { TrainingCycleOptions } from \"../../../game/types\";\nimport { NamedAgent, RelativeReward } from \"../../../types/state\";\nimport {\n  CycleCompleteNotification,\n  DoneNotification,\n  StartRequest,\n  TrainingWorkerMessageType,\n  TrainingWorkerNotification,\n} from \"./types\";\n\ninterface Self {\n  postMessage(\n    message: TrainingWorkerNotification,\n    transfers?: Transferable[]\n  ): void;\n  addEventListener: Worker[\"addEventListener\"];\n}\n\ndeclare const self: Self;\n\nexport {};\n\nself.addEventListener(\"message\", (event) => {\n  const { data } = event;\n  if (\"object\" === typeof data && data !== null) {\n    if (data.messageType === TrainingWorkerMessageType.Start) {\n      decodeDataAndStartTraining(data);\n    }\n  }\n});\n\nfunction decodeDataAndStartTraining(data: StartRequest): void {\n  const namedTrainee: NamedAgent = {\n    name: data.namedTraineeBuffer.agentName,\n    agent: deserializeAgent(data.namedTraineeBuffer.buffer),\n  };\n  const namedOpponents: NamedAgent[] = data.namedOpponentBuffers.map(\n    ({ agentName, buffer }) => ({\n      name: agentName,\n      agent: deserializeAgent(buffer),\n    })\n  );\n  const { trainingCycles, trainingCycleOptions } = data;\n\n  startTraining(\n    namedTrainee,\n    namedOpponents,\n    trainingCycles,\n    trainingCycleOptions\n  );\n}\n\nfunction startTraining(\n  namedTrainee: NamedAgent,\n  namedOpponents: NamedAgent[],\n  trainingCycles: number,\n  options: TrainingCycleOptions\n): void {\n  const trainee = namedTrainee.agent;\n  const opponents = namedOpponents.map(({ agent }) => agent);\n  const opponentNames = namedOpponents.map(({ name }) => name);\n\n  const opponentCount = namedOpponents.length;\n  const { evaluationOptions } = options;\n\n  for (let cycleNumber = 0; cycleNumber < trainingCycles; cycleNumber++) {\n    {\n      const relativeRewards = new Float64Array(opponentCount);\n\n      for (\n        let opponentIndex = 0;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const opponent = opponents[opponentIndex];\n        relativeRewards[opponentIndex] = evaluate(\n          trainee,\n          opponent,\n          evaluationOptions\n        );\n      }\n\n      let strongestOpponentIndex = 0;\n      let lowestRelativeReward = relativeRewards[0];\n      for (\n        let opponentIndex = 1;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const reward = relativeRewards[opponentIndex];\n        if (reward < lowestRelativeReward) {\n          lowestRelativeReward = reward;\n          strongestOpponentIndex = opponentIndex;\n        }\n      }\n\n      const strongestOpponent = opponents[strongestOpponentIndex];\n      trainee.train(strongestOpponent, options);\n    }\n\n    {\n      const relativeRewards: RelativeReward[] = new Array(opponentCount);\n\n      for (\n        let opponentIndex = 0;\n        opponentIndex < opponentCount;\n        opponentIndex++\n      ) {\n        const opponent = opponents[opponentIndex];\n        relativeRewards[opponentIndex] = {\n          opponentName: opponentNames[opponentIndex],\n          reward: evaluate(trainee, opponent, evaluationOptions),\n        };\n      }\n\n      onCycleComplete(cycleNumber, namedTrainee, relativeRewards);\n    }\n  }\n\n  onDoneTraining();\n}\n\nfunction onCycleComplete(\n  cycleNumber: number,\n  trainee: NamedAgent,\n  relativeRewards: RelativeReward[]\n): void {\n  const traineeBuffer = trainee.agent.toArrayBuffer();\n  const namedTraineeBuffer = { agentName: trainee.name, buffer: traineeBuffer };\n  const message: CycleCompleteNotification = {\n    messageType: TrainingWorkerMessageType.CycleComplete,\n\n    cycleNumber,\n    namedTraineeBuffer,\n    relativeRewards,\n  };\n  self.postMessage(message, [traineeBuffer]);\n}\n\nfunction onDoneTraining(): void {\n  const message: DoneNotification = {\n    messageType: TrainingWorkerMessageType.Done,\n  };\n  self.postMessage(message);\n}\n"],"sourceRoot":""}